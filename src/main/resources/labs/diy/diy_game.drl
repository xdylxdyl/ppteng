package drools.common

import drools.common.*
import com.gemantic.killer.common.model.Message
import com.gemantic.killer.common.model.Operater;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import  com.gemantic.common.util.json.GsonUtil;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.lang.math.RandomUtils;
import org.apache.commons.lang.StringUtils;
import com.gemantic.killer.util.*;





//===========game prepare will process clear info,role assing ,right assign




rule 'clear prev game role '
ruleflow-group "game clear"
no-loop true
when
	//conditions    
    $message:Message($subject:subject,predict=="start")   
    $role:Role()    //clear source    
    
then      
	//actions
     LogUtil.log("clear prev game role start================= ");      
     retract ($role);
     LogUtil.log("clear prev game role over ================="); 
    
end


//===================clear game over 


rule 'init'
ruleflow-group "game prepare"
no-loop true
when
	//conditions    
    $message:Message($subject:subject,predict=="start",$time:time)
    $room:Room(status=="unrun")  
    not Game()  
    
    //get all players
    $all_login_ids:HashSet()
	      from accumulate(
	      Player($id:id)	     
	      init(Set ls=new HashSet();),
	      action(ls.add($id);),
	      result(ls)
	      );
	      
    //get all readys
    $allReadys:ArrayList()
	      from accumulate(
	      $person:Player(status=="ready")	     
	      init(List ls=new ArrayList();),
	      action(ls.add($person);),
	      result(ls)
	      );
	      
	$unReadys:ArrayList()
      from accumulate(
	      $person:Player(status=="unready")	     
	      init(List ls=new ArrayList();),
	      action(ls.add($person);),
	      result(ls)
	      );
     //get operater
     $operater:Operater()
    
    //clear source    
    
then      
	//actions
   
     LogUtil.log("game init process start =================");
     //0 setGameName 
     String	rname=String.valueOf(RandomUtils.nextLong());
     
      //get uid id List
	 List ls=getIDFromPlayer($allReadys);
     	
	  int kingCount=1;  
	 int  waterCount= $allReadys.size()-kingCount;
	 
	 Map role_count=new HashMap();	
	    role_count.put("king", kingCount);
		role_count.put("water", waterCount);
     
      Map	ids_role=RoleUtil.assingRole(role_count,ls);
     
	
	 
	 //2. creae game
	Game game=new Game("ready",$allReadys.size()-kingCount,kingCount,System.currentTimeMillis(),0L,$time,rname);
	List readyIDS=new ArrayList();
	
	 //3.create Role/status/vote record message create log ,how to update all unready players status;
	 
		LogUtil.log("============================ role is "+ids_role);
		for(Object o: $allReadys){
			     Player p=(Player)o;			   
			    String uid=p.getId();
			    readyIDS.add(Long.valueOf(uid));
			    
			       String role=(String)ids_role.get(uid);			      
				 
				  
				  Role r=new Role(uid,role);
				  insert(r);
			    
			  	  String status="living";
				  if("king".equals(role)){
				     status="king";
				  }
				  Message statusMessage=new Message(uid,"status",status); 
				  insert(statusMessage);      
				 
				  modify(p){setStatus(status)};
				 
				  
		            
		       JobLogger.logMessages(rname,Arrays.asList(new Message[]{new Message(uid,"ready",""),new Message(uid,"login","")}));			
	  	
			
		}

	
	
	
	//4 update room status ||repeat with game			
	modify($room){setStatus("run")};
	 
     StatusChange sc=new StatusChange("day");
     insert(sc);
	//6.update game phase	
   
    insert(game);

    
	
	
	
	
	
	//7. update operater 
	$operater.setGameStart(true);
	$operater.setPlayers(readyIDS);
   LogUtil.log("game init process over  ================="+game);
   
end
//===========game prepare will process clear info,role assing ,right assign============over 




//===========phase action============over




rule 'person die by logout'
ruleflow-group "person status"
no-loop true
when
 
  
  $game:Game()
  Message($subject:subject,predict=="logout")
  $person:Player(id==$subject,status=="living"||status=="king")
  Role($role:role,id==$subject)
    
then
   LogUtil.log("person die logout start==============");
   Die die=new Die($subject,"logout",$role);  
   
   
   insert(die);
   LogUtil.log("person die logout start==============");   

 
end




//==person status ===over 







//==die process==


rule 'die process'
ruleflow-group "die process"
no-loop true
when
 
  $die:Die($id:id,$type:type,$role:role)
  $game:Game($liverCount:liverCount,$kingCount:kingCount,$status:status);
  $person:Player(id==$id,status!="die");   
  $room:Room(status=="run")
 then
   LogUtil.log(" die  start============="+$die);
   
   //if water die
    if("water".equals($role)){
        modify($game){setLiverCount($liverCount-1)};
    
    }else{
   
          //if king die
       modify($game){setKingCount($kingCount-1)};          
       
       
    }
    
    modify($person){setStatus("die")};
    
         //if die of vote 
     Message dieMessage=new Message($id,"die",$type);  
     insert(dieMessage);
     
    retract($die);
    LogUtil.log(" die  over=============");
    

 
end


//==person status ===over 

//==game status===start 



rule 'game over of abortion'

ruleflow-group "game status"
when
     //$operater:Operater()  
     $game:Game($kingCount:kingCount,$recordName:recordName);
     eval($kingCount == 0 )    
     $room:Room(status=="run")
      
then 
     LogUtil.log("game over abortion start  ================="); 
    LogUtil.log("game detail "+$game); 
    Message gameOver=new Message($recordName,"over","abortion");   
    insert(gameOver);    
  
      LogUtil.log("game over abortion over  ================="); 
end


rule 'game over of end'

ruleflow-group "game status"
when
     //$operater:Operater()  
     $game:Game($kingCount:kingCount,$recordName:recordName);
    
     Message(predict=="announce") 
     $room:Room(status=="run")
      
then 
     LogUtil.log("game over end start  ================="); 
    LogUtil.log("game detail "+$game); 
    Message gameOver=new Message($recordName,"over","end");   
    insert(gameOver);    
  
      LogUtil.log("game over end over  ================="); 
end








    

rule 'game over process '

ruleflow-group "game status"
no-loop true
when
     //$operater:Operater()  
     Message(predict=="over",$object:object)
     $game:Game($recordName:recordName);
     $room:Room(status=="run")     
     $all_login_ids:HashSet()
	      from accumulate(
	      Player($id:id)	     
	      init(Set ls=new HashSet();),
	      action(ls.add($id);),
	      result(ls)
	 );
	 
	 	 $all_right:HashMap()
	      from accumulate(
	      $right:Right($id:id)	     
	      init(Map map=new HashMap();),
	      action(map.put($id,$right);),
	      result(map)
	      );
	 
	 $operater:Operater()  
      
then 
     LogUtil.log("game over process  start  ================="); 
     String rightContent="say,ready";
     for(Object o:$all_login_ids){
            String uid=(String)o;             
            
            Right right =(Right)$all_right.get(uid);
            
            if(right==null){
               right= new Right(uid,convertString2Set(rightContent),false);
               insert(right);	
            }else{
               Set rights=convertString2Set(rightContent);
            
               modify(right){setRight(rights)};
            
            
            }            
            
            
	        Message rightMessage=new Message(uid,"right",rightContent); 
            insert(rightMessage);		
	  
            
        
	
	
     
     
     }
  
      modify($room){setStatus("unrun")};
       modify($operater){setGameOver(true),setRecordID(Long.valueOf($recordName))};
    
    
      LogUtil.log("game over process  over  ================="); 
end






//===========switch ============start 





rule 'phase switch '
ruleflow-group "phase switch"
no-loop true
when
	//conditions    
	$statusChange:StatusChange($change:change)
    $room:Room(status=="run")
    $game:Game() 
    $operater:Operater()
    
then      
	//actions 
     LogUtil.log("phase switch start================= "); 
     List tms=$operater.getTimerMessages();
    
    if("day".equals($change)){
    
      //1.set game phase,set last time,
          
       modify($game){setStatus("day"),setLastTime(System.currentTimeMillis())};
      Message currentDay=createDay($room);    
    
       //3.insert day come 
      insert(currentDay); 
      
      
        Message dayDelay=createDelayAnnounceOfQuestion($room);
         tms.add(dayDelay); 
    
         modify($operater){setTimerMessages(tms)};
    }    
       
       
    retract($statusChange);
     LogUtil.log("phase switch  over =================");   
end



//===========switch ============over 

//===========phase prepare ============start  

rule 'day phase prepare right'
ruleflow-group "phase prepare"
no-loop true
when
	//conditions
	$player:Player(status=="living",$uid:id)
	Message($subject:subject,predict=="time",subject=="day")
	 
    Room(status=="run")
    Game(status=="day")
    $right:Right(id==$uid)
    Role(role!="king")
then      
	//actions 
     LogUtil.log("day phase prepare  start================= "); 
  
  
     modify($right){setRight(convertString2Set("say"))};    	
	
	
	 Message rightMessage=new Message($uid,"right","say"); 
     insert(rightMessage);
          
     LogUtil.log("day phase prepare  over =================");   
end



rule 'day phase prepare right of king'
ruleflow-group "phase prepare"
no-loop true
when
	//conditions
	$player:Player(status=="king",$uid:id)
	Message($subject:subject,predict=="time",subject=="day")
	 
    Room(status=="run")
    Game(status=="day")
    $right:Right(id==$uid)
    Role(role=="king")
then      
	//actions 
     LogUtil.log("day phase prepare of king start================= "); 
  
  
     modify($right){setRight(convertString2Set("say,announce"))};    	
	
	
	 Message rightMessage=new Message($uid,"right","say,announce"); 
     insert(rightMessage);
          
     LogUtil.log("day phase prepare of king over =================");   
end







//===========phase prepare============over 

//===========message accept============start 



rule 'single accept of assign'
ruleflow-group "message accept"
salience 100
no-loop true 
when
     $message:Message($subject:subject,predict=="assign",$object:object,$accepts:accepts)   
	 
	 
then
     LogUtil.log(" single accept of assign start  ============="+$message);        
     $accepts.add($object); 
     modify($message){setAccepts($accepts)};    
    LogUtil.log("single accept of assign over =============");
    
end
  
rule 'single accept of right'
ruleflow-group "message accept"
salience 100
no-loop true 
when
     $message:Message($subject:subject,predict=="right",$object:object,$accepts:accepts)   
	 
	 
then
     LogUtil.log(" single accept of right start  ============="+$message); 
     $accepts.add($subject);        
     modify($message){setAccepts($accepts)};    
    LogUtil.log(" single accept of right over =============");
    
end




rule 'all accept of all'
ruleflow-group "message accept"
salience 0
no-loop true 
when
    $message:Message($accepts:accepts)   
	eval($message.getAccepts().size()==0)
   $all_login_ids:HashSet()
	      from accumulate(
	      Player($id:id)	     
	      init(Set ls=new HashSet();),
	      action(ls.add($id);),
	      result(ls)
	      );
	 
then
     LogUtil.log(" all accept start  ============="+$message);         
     modify($message){setAccepts(new ArrayList($all_login_ids))};    
    LogUtil.log("all accept over =============");
    
end








rule 'game player query'
ruleflow-group "query"
when
	//conditions
    $message:Message($subject:subject,predict=="query")
    $room:Room()
    $allLogins:ArrayList()
	      from accumulate(
	      $person:Player()	     
	      init(List ls=new ArrayList();),
	      action(ls.add($person);),
	      result(ls)
	      );
	      
	
	
	$game:Game($status:status);  
    $operater:Operater()
    $right:Right(id==$subject)
    $role:Role(id==$subject,$r:role)
    
    
then      

	 LogUtil.log("get player query info =================");	 
      Map m=new HashMap();
      m.put("room",$room);
      m.put("person",$allLogins);
      m.put("right",$right);
      setRemainTime($status,$game,$room) ; 
      m.put("game",$game);     
      m.put("role",$role);          
   
          
      $operater.setSnapshots(GsonUtil.toJson(m));     
      retract($message);   
	  LogUtil.log("get player query info over =================");
end



rule 'game unplayer query'
ruleflow-group "query"
when
	//conditions
    $message:Message($subject:subject,predict=="query")
   $room:Room()
    $allLogins:ArrayList()
	      from accumulate(
	      $person:Player()	     
	      init(List ls=new ArrayList();),
	      action(ls.add($person);),
	      result(ls)
	      );      
	
	$right:Right(id==$subject)
	$game:Game($status:status);  
    $operater:Operater() 
    not Role(id==$subject)
    
    
then      
	 LogUtil.log("get unplayer query info =================");  
      Map m=new HashMap();
      m.put("room",$room);
      m.put("person",$allLogins);   
      
     setRemainTime($status,$game,$room) ;
      m.put("game",$game);  
     m.put("right",$right);    
        

      $operater.setSnapshots(GsonUtil.toJson(m));     
      retract($message);
    	//actions
	LogUtil.log("get unplayer query info over =================");
end



//========================retract game start =========================


rule 'retract game'
ruleflow-group "retract game"
when
	//conditions
	$room:Room(status=="unrun") 
	$game:Game()
then      
	//actions
     LogUtil.log("retract game start================= ");  
     retract($game);
     LogUtil.log("retract game over ================="); 
    
end

//========================retract game over =========================


//========================game record start =========================

rule 'record'
ruleflow-group "record"
when
	//conditions
	$game:Game(); 
    $operater:Operater()     
then      
	 LogUtil.log("record start=================");       

      JobLogger.logMessages($game.getRecordName(), $operater.getNextMessages());
	LogUtil.log("record over =================");
end

//========================game record over =========================


