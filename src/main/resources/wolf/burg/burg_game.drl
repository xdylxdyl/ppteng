package drools.common

import drools.common.*
import com.gemantic.killer.common.model.Message
import com.gemantic.killer.common.model.Operater;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.Random;
import  com.gemantic.common.util.json.GsonUtil;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.lang.math.RandomUtils;
import org.apache.commons.lang.StringUtils;
import com.gemantic.killer.util.*;





//===========game prepare will process clear info,role assing ,right assign

//========== 



rule 'clear prev game role '
ruleflow-group "game clear"
no-loop true
when
	//conditions    
    $message:Message($subject:subject,predict=="start")   
    $role:Role()    //clear source    
    
then      
	//actions
     LogUtil.log("clear prev game role start================= ");      
     retract ($role);
     LogUtil.log("clear prev game role over ================="); 
    
end




rule 'clear prev game KingDie '
ruleflow-group "game clear"
no-loop true
when
	//conditions    
    $message:Message($subject:subject,predict=="start")   
    $kingDie:KingDie()    //clear source    
    
then      
	//actions
     LogUtil.log("clear prev game KingDie start================= ");      
     retract ($kingDie);
     LogUtil.log("clear prev game KingDie over ================="); 
    
end


rule 'clear prev game KingLiving '
ruleflow-group "game clear"
no-loop true
when
	//conditions    
    $message:Message($subject:subject,predict=="start")   
    $kingLiving:KingLiving()    //clear source    
    
then      
	//actions
     LogUtil.log("clear prev game KingLiving start================= ");      
     retract ($kingLiving);
     LogUtil.log("clear prev game KingLiving over ================="); 
    
end


rule 'clear prev game burgDie '
ruleflow-group "game clear"
no-loop true
when
	//conditions    
    $message:Message($subject:subject,predict=="start")   
    $burgDie:BurgDie()    //clear source    
    
then      
	//actions
     LogUtil.log("clear prev game $burgDie start================= ");      
     retract ($burgDie);
     LogUtil.log("clear prev game $burgDie over ================="); 
    
end

rule 'clear prev game burgLiving '
ruleflow-group "game clear"
no-loop true
when
	//conditions    
    $message:Message($subject:subject,predict=="start")   
    $burgLiving:BurgLiving()    //clear source    
    
then      
	//actions
     LogUtil.log("clear prev game $burgLiving start================= ");      
     retract ($burgLiving);
     LogUtil.log("clear prev game $burgLiving over ================="); 
    
end


rule 'clear prev game burg '
ruleflow-group "game clear"
no-loop true
when
	//conditions    
    $message:Message($subject:subject,predict=="start")   
    $burg:Burg()    //clear source    
    
then      
	//actions
     LogUtil.log("clear prev game burg start================= ");      
     retract ($burg);
     LogUtil.log("clear prev game burg over ================="); 
    
end

rule 'clear prev game king '
ruleflow-group "game clear"
no-loop true
when
	//conditions    
    $message:Message($subject:subject,predict=="start")   
    $king:King()    //clear source    
    
then      
	//actions
     LogUtil.log("clear prev game king start================= ");      
     retract ($king);
     LogUtil.log("clear prev game king over ================="); 
    
end




rule 'clear prev game BombAction '
ruleflow-group "game clear"
no-loop true
when
	//conditions    
    $message:Message($subject:subject,predict=="start")   
    $bomb:BombAction()    //clear source    
    
then      
	//actions
     LogUtil.log("clear prev game BombAction start================= ");      
     retract ($bomb);
     LogUtil.log("clear prev game BombAction over ================="); 
    
end



  
rule 'clear prev game dismissal '
ruleflow-group "game clear"
no-loop true
when
	//conditions    
    $message:Message($subject:subject,predict=="start")   
    $dismissal:Dismissal()    //clear source    
    
then      
	//actions
     LogUtil.log("clear prev game dismissal start================= ");      
     retract ($dismissal);
     LogUtil.log("clear prev game dismissal over ================="); 
    
end



//===================clear game over 


rule 'init'
ruleflow-group "game prepare"
no-loop true
	//conditions    
when
    $message:Message($subject:subject,predict=="start",$time:time)
    $room:Room(status=="unrun")  
    not Game()  
    
    //get all players
    $all_login_ids:HashSet()
	      from accumulate(
	      Player($id:id)	     
	      init(Set ls=new HashSet();),
	      action(ls.add($id);),
	      result(ls)
	      );
	      
    //get all readys
    $allReadys:ArrayList()
	      from accumulate(
	      $person:Player(status=="ready")	     
	      init(List ls=new ArrayList();),
	      action(ls.add($person);),
	      result(ls)
	      );
	      
	$unReadys:ArrayList()
      from accumulate(
	      $person:Player(status=="unready")	     
	      init(List ls=new ArrayList();),
	      action(ls.add($person);),
	      result(ls)
	      );
     //get operater
     $operater:Operater()
    
    //clear source    
    
then      


	//actions
   
     LogUtil.log("game init process start =================");
     //0 setGameName 
     String	rname=String.valueOf(RandomUtils.nextLong());
     //1.assign role	
   	 
	 int  wolfCount=1;  
	 int  waterCount= $allReadys.size()-wolfCount;
	 int burgCount=5;
	 int attemptCount=3;
	 int currentBurg=1;
	 int bombBurgCount=0;
	 int umbombBurgCount=0;

	 Map role_count=new HashMap();
		role_count.put("wolf", wolfCount);
	    role_count.put("water", waterCount);

	 //get uid id List
	 List ls=getIDFromPlayer($allReadys);
	 Map	ids_role=RoleUtil.assingRole(role_count,ls);
	 //2. creae game
	
	Game game=new Game("ready",$allReadys.size(),waterCount,wolfCount,burgCount,attemptCount,currentBurg,bombBurgCount,umbombBurgCount,System.currentTimeMillis(),0L,$time,rname);
	List readyIDS=new ArrayList();
	
	 //3.create Role/status/vote record message create log ,how to update all unready players status;
	 
     LogUtil.log("============================ role is "+ids_role);
		for(Object o: $allReadys){
			     Player p=(Player)o;			   
			    String uid=p.getId();
			    readyIDS.add(Long.valueOf(uid));
			    String role=(String)ids_role.get(uid);			      
				 
				  
				  Role r=new Role(uid,role);
				  insert(r);
				  LogUtil.log(role);
				  
				  
				  Message assignMessage=new Message(role,"assign",uid); 
				  insert(assignMessage);			          
				
				 
				  Message statusMessage=new Message(uid,"status","living"); 
				  insert(statusMessage);      
				 
				  modify(p){setStatus("living")};
				 
				  
		            
		       JobLogger.logMessages(rname,Arrays.asList(new Message[]{new Message(uid,"ready",""),new Message(uid,"login","")}));			
	  	
			
		}
		
		List burgs=initBurgs();
		for(Object o:burgs){
		
		  Burg burg=(Burg)o;
		  insert(burg);		  
		}
		LivingPlayers lp=new LivingPlayers($allReadys);
        insert(lp);
		
		Random r = new Random();
		int index=r.nextInt($allReadys.size()-1);
		String kingID=getNextKingIDFromPlayers($allReadys,index);
		
        King king=new King(kingID,index);
        insert(king);       
      
        Message assignKingMessage=new Message(kingID,"assignKing","1"); 
		insert(assignKingMessage);
           
        Message burgMessage=new Message("1","burgDetail","2"); 
		insert(burgMessage);
     
	
	
	
	//4 update room status ||repeat with game			
	modify($room){setStatus("run")};
	
	
	
 
     
	 
     StatusChange sc=new StatusChange("dispatch");
     insert(sc);
	//6.update game phase	
   
    insert(game);

    
	
	
	
	
	
	//7. update operater 
	$operater.setGameStart(true);
	$operater.setPlayers(readyIDS);
   LogUtil.log("game init process over  ================="+game);
   
end
//===========game prepare will process clear info,role assing ,right assign============over 

//========================phase clear start =========================




rule 'phase clear king die'
ruleflow-group "phase clear"
no-loop true
when
	//conditions    
 
    $room:Room(status=="run")
    Game()
    $kingDie:KingDie()    
       
then      
	//actions
   //actions
     LogUtil.log("phase clear king die start================= "); 
     retract($kingDie);
     LogUtil.log("phase clear king die over =================");   
end


rule 'phase clear king Living'
ruleflow-group "phase clear"
no-loop true
when
	//conditions    
    King($id:id)
    $room:Room(status=="run")
    Game()
    $kingLiving:KingLiving()    
       
then      
	//actions
   //actions
     LogUtil.log("phase clear king Living start================= "); 
     retract($kingLiving);
     LogUtil.log("phase clear king Living over =================");   
end



rule 'phase clear burg die'
ruleflow-group "phase clear"
no-loop true
when
	//conditions    
   
    $room:Room(status=="run")
    Game()
    $burgDie:BurgDie()    
       
then      
	//actions
   //actions
     LogUtil.log("phase clear burg die start================= "); 
     retract($burgDie);
     LogUtil.log("phase clear burg die over =================");   
end


rule 'phase clear burg Living'
ruleflow-group "phase clear"
no-loop true
when
	//conditions    
    
    $room:Room(status=="run")
    Game()
    $burgLiving:BurgLiving()    
       
then      
	//actions
   //actions
     LogUtil.log("phase clear burg Living start================= "); 
     retract($burgLiving);
     LogUtil.log("phase clear burg Living over =================");   
end



rule 'phase clear dismissal'
ruleflow-group "phase clear"
no-loop true
when
	//conditions    
    $dismissal:Dismissal()
    $room:Room(status=="run")
    Game(status!="dismissal")    
       
then      
	//actions
   //actions
     LogUtil.log("phase clear dismissal start================= "); 
     retract($dismissal);
     LogUtil.log("phase clear dismissal over =================");   
end





rule 'phase clear BombAction '
ruleflow-group "phase clear"
no-loop true
when
	//conditions    
    $bombAction:BombAction() 
    $room:Room(status=="run")
    Game(status!="action") 
   
then      
	//actions
   //actions
     LogUtil.log("phase clear BombAction start================= "); 
    
     retract($bombAction);
     LogUtil.log("phase clear BombAction over =================");   
end








rule 'phase clear right '
ruleflow-group "phase clear"
no-loop true
when
	//conditions
	    
    $right:Right($id:id)
    $player:Player(id==$id,status=="living")
    $room:Room(status=="run")
    (Game(status=="dispatch") and   Message($subject:subject,predict=="time",subject=="dispatch"))
    or
    (Game(status=="dismissal") and   Message($subject:subject,predict=="time",subject=="dismissal"))  
    or    
     (Game(status=="action") and   Message($subject:subject,predict=="time",subject=="action"))
    
then      
	//actions
   //actions
     LogUtil.log("phase clear right start================= ");
     modify($right){setRight(new HashSet()),setIsNotify(false)}; 
     LogUtil.log("phase clear phase over =================");   
end


//========================phase clear over =========================


//===========phase action============start 





rule 'dispatch member'
ruleflow-group "phase action"
no-loop true
when
   
    $message:Message($id:subject,predict=="dispatch",$object:object)
    King(id==$id)
    $game:Game(status=="dispatch",$currentBurg:currentBurg) 
    $burg:Burg(id==$currentBurg,$actionDetails:actionDetails,$attemptCount:attemptCount)
     //get all readys
    $allLiving:ArrayList()
	      from accumulate(
	      Player($pid:id,status=="living")	     
	      init(List ls=new ArrayList();),
	      action(ls.add($pid);),
	      result(ls)
	      );
       
then
    LogUtil.log("dispatch member start  ================="+$burg); 
  
    List members=parseMembers($object);
      LogUtil.log("dispatch member start  ================= "+members); 
         Object ado=$actionDetails.get($attemptCount);
         ActionDetail ad=(ActionDetail)ado;
         LogUtil.log("dispatch member start  ================= "+ad); 
         ad.setMembers(members);
         $actionDetails.put($attemptCount,ad);
         LogUtil.log("dispatch member start  ================= "+$actionDetails); 
         modify($burg){setActionDetails($actionDetails)};
    
   
   
    
    LogUtil.log("dispatch member over  ================="); 
end




rule 'dismissal phase action'
ruleflow-group "phase action"
no-loop true
when
  
   $message:Message($id:subject,predict=="dismissal",$object:object)   
    Game($status:status,$liverCount:liverCount,$currentBurg:currentBurg)   
    $right:Right(id==$id,right contains "dismissal")
    Role(id==$id,$role:Role)
    $burg:Burg(id==$currentBurg)
    
then
    LogUtil.log(" dismissal  action start  ================="); 
    
    Dismissal ds=new Dismissal($id,$object);
    insert(ds);
    modify($right){setRight(convertString2Set("say")),setIsNotify(false)};
    LogUtil.log(" dismissal  action over  ================="); 
end





rule 'action bomb agree '
ruleflow-group "phase action"
no-loop true 
when
    $message:Message($id:subject,predict=="action",object=="agree")   
    Game(status=="action",$currentBurg:currentBurg)   
    $right:Right(id==$id,right contains "action")
    $bombAction:BombAction(id==$id,$result:result)
    Role(id==$id,$role:Role)
    $burg:Burg(id==$currentBurg)
then
   
    LogUtil.log(" action bomb agree  start  =================");  
      modify($bombAction){setResult("agree")};     
      modify($right){setRight(new HashSet()),setIsNotify(false)};
    LogUtil.log(" action bomb agree  over  ================="); 
   
end

rule 'action bomb disagree '
ruleflow-group "phase action"
no-loop true 
when
    $message:Message($id:subject,predict=="action",object=="disagree")   
    Game(status=="action",$currentBurg:currentBurg)   
    $right:Right(id==$id,right contains "action")
    $bombAction:BombAction(id==$id,$result:result)
    Role(id==$id,$role:Role)
    $burg:Burg(id==$currentBurg)
then
   
    LogUtil.log(" action bomb disagree  start  =================");
    modify($bombAction){setResult("disagree")};
    LogUtil.log(" action bomb disagree  over  ================="); 
   
end






//===========phase action============over



//==person status==start






rule 'person die by logout'
ruleflow-group "person status"
no-loop true
when
 
  
  $game:Game()
  Message($subject:subject,predict=="logout")
  $person:Player(id==$subject,status=="living"||status=="king")
  Role($role:role,id==$subject)
then
   LogUtil.log("person die logout start==============");
   Die die=new Die($subject,"logout",$role);   
   
   
   insert(die);
   LogUtil.log("person die logout start==============");   

 
end

rule 'King Die'
ruleflow-group "person status"
no-loop true
when
 
   $king:King($id:id)
   $person:Player(id==$id)  
   (Game(status=="dispatch") 
    and
    Message(predict=="switch",subject=="dispatch")
   )
   or
    (Game(status=="dismissal") 
    and
    Message(predict=="switch",subject=="dispatch")
   )
   or(
   Game(status=="dismissal")   
   
   and
   
   $all_living_ids:HashSet()
	      from accumulate(
	      Player($pid:id,status=="living")	     
	      init(Set ls=new HashSet();),
	      action(ls.add($pid);),
	      result(ls)
	      );
	      
	and      
	
	$refuse:HashSet()
	      from accumulate(
	      Dismissal($did:id,result=="disagree")	     
	      init(Set ls=new HashSet();),
	      action(ls.add($did);),
	      result(ls)
	      );
	and
	
    eval($refuse.size()*2 >$all_living_ids.size())
   )
   
 
 
then
   LogUtil.log("King Die start==============");
   KingDie die=new KingDie($id); 
   insert(die);
 
   LogUtil.log("King Die over==============");   

 
end




rule 'burg die process'
ruleflow-group "person status"
no-loop true
when
    $room:Room(status=="run")  
    $game:Game(status=="action",$currentBurg:currentBurg)
    $burg:Burg(id==$currentBurg)     
    forall($agreeBombAction:BombAction(result=="agree"))
    not BurgDie()
 then
 
 LogUtil.log(" burg die process  start============="); 
      BurgDie burgDie=new BurgDie($currentBurg);
      insert(burgDie);
 
     LogUtil.log(" burg die process over============="); 
 
end




rule 'burg living process'
ruleflow-group "person status"
no-loop true
when
    $room:Room(status=="run")
    Game($currentBurg:currentBurg)
    Burg(id==$currentBurg)
    $operater:Operater()
    (
    BombAction(result=="disagree")
    and 
    Game(status=="action")   
    )
    or
    ($message:Message(subject=="dispatch",predict=="switch"))
    and 
    Game(status=="action")   
    or
    (
     Game()
     and
     Burg(id==$currentBurg,attemptCount > 3)   
     
    )
    not BurgLiving()
 then
   LogUtil.log(" burg living process start=============");     
   BurgLiving burgLiving=new BurgLiving($currentBurg);
   insert(burgLiving);   
   LogUtil.log("burg living process  over=============");
    
 
end



rule 'king living '
ruleflow-group "person status"
no-loop true
when
	//conditions all player description ready    
    $all_living_ids:HashSet()
	      from accumulate(
	      Player($id:id,status=="living")	     
	      init(Set ls=new HashSet();),
	      action(ls.add($id);),
	      result(ls)
	      );
	      
	 $dismissal:HashSet()
	      from accumulate(
	      Dismissal($id:id,result=="agree")	     
	      init(Set ls=new HashSet();),
	      action(ls.add($id);),
	      result(ls)
	      );   
	
		
    $room:Room(status=="run")
    $game:Game(status=="dismissal",$currentBurg:currentBurg) 
    $operater:Operater()
    $burg:Burg(id==$currentBurg,$attemptCount:attemptCount,$actionDetails:actionDetails)
    eval($dismissal.size()*2>$all_living_ids.size())
    King($id:id)
    
then     
    LogUtil.log("dismissal phase to agree action phase switch prepare  start================= ");     
       KingLiving kl=new KingLiving($id);
       insert(kl);
     
      
    LogUtil.log("dismissal phase to agree action phase switch prepare over================= "); 
end








//==person status ===over 




//==die process==
rule 'king die process'
ruleflow-group "person status"
no-loop true
when
  $game:Game($currentBurg:currentBurg);
  $kingDie:KingDie($id:id)
  $burg:Burg(id==$currentBurg,$attemptCount:attemptCount)   
  $room:Room(status=="run")
 
 then
   LogUtil.log(" king die process  start=============");  
  
  
      modify($burg){setAttemptCount($attemptCount+1)};    
      LogUtil.log(" ============="+$burg);
     Message dismissalResult=new Message($id,"dismissalResult","disagree"); 
     insert(dismissalResult);	
    
   
   LogUtil.log(" king die process  over=============");
    
 
end






rule 'king living process'
ruleflow-group "die process"
no-loop true
when
  //conditions all player description ready    
 
	
		
    $room:Room(status=="run")
    $game:Game(status=="dismissal",$currentBurg:currentBurg) 
    $operater:Operater()
    $burg:Burg(id==$currentBurg,$attemptCount:attemptCount,$actionDetails:actionDetails)   
    King($id:id)
    KingLiving(id==$id)
 then
   LogUtil.log(" king living process  start=============");   
  
  
   Object ado=$actionDetails.get($attemptCount);
      ActionDetail ad=(ActionDetail)ado;
      ad.setDismissal("agree");
      $actionDetails.put($attemptCount,ad);
      modify($burg){setActionDetails($actionDetails)};
     for(Object o:ad.getMembers()){
         String id=(String)o;
         BombAction ba=new BombAction(id,$currentBurg,"unkown");
         insert(ba);
         
          LogUtil.log("insert bomb action ================= "+ba); 
     }
     Message dismissalResult=new Message($id,"dismissalResult","agree"); 
     insert(dismissalResult);
     
   
   LogUtil.log(" king living process  over=============");
    
 
end





rule 'die process'
ruleflow-group "die process"
no-loop true
when
 
  $die:Die($id:id,$type:type,$role:role)
  $game:Game($liverCount:liverCount,$status:status,$recordName:recordName);
  $person:Player(id==$id,status!="die");   
  $room:Room(status=="run")
 then
   LogUtil.log(" die  start=============");   
   //if water die
  
     modify($game){setLiverCount($liverCount-1)};
    modify($person){setStatus("die")};
    
         //if die of vote 
     Message dieMessage=new Message($id,"die",$type);  
     insert(dieMessage);
     
    retract($die);
    
      
    
       LogUtil.log(" die  over=============");
    
 
end

rule ' burg living unbomb '
ruleflow-group "die process"
no-loop true
when
	//conditions    
  
    $room:Room(status=="run")
    $game:Game($currentBurg:currentBurg,$unbombBurgCount:unbombBurgCount)
    $burg:Burg(id==$currentBurg,$memberCount:memberCount)
    $BurgLiving:BurgLiving(id==$currentBurg)
    $king:King($index:index)  
then     
    LogUtil.log("burg living unbomb start================= "); 
    modify($burg){setResult("unbomb")}
        Message burgResultMessage=new Message(String.valueOf($currentBurg),"bombResult","unbomb");
    insert(burgResultMessage);
      modify($game){setUnbombBurgCount($unbombBurgCount+1),setCurrentBurg($currentBurg+1)};
      
  
    LogUtil.log("burg living unbomb over================= "); 
end






rule 'burg  die bomb '
ruleflow-group "die process"
no-loop true
when
	//conditions    
  
    $room:Room(status=="run")
    $game:Game($currentBurg:currentBurg,$bombBurgCount:bombBurgCount)
    $burg:Burg(id==$currentBurg)
    $operater:Operater()   
    $BurgDie:BurgDie(id==$currentBurg)
    $king:King($index:index)

   
then     
    LogUtil.log("burg  die bomb process   start================= "); 
 
    modify($burg){setResult("bomb")};
    Message burgResultMessage=new Message(String.valueOf($currentBurg),"bombResult","bomb");
    insert(burgResultMessage);
    modify($game){setBombBurgCount($bombBurgCount+1),setCurrentBurg($currentBurg+1)};
    
    
    
    LogUtil.log("burg  die bomb process  over================= "); 
end



rule 'king switch process'
ruleflow-group "switch process"
no-loop true
when
  //conditions all player description ready   
		
    $room:Room(status=="run")
    $game:Game($currentBurg:currentBurg) 
    $operater:Operater()
    $burg:Burg(id==$currentBurg,$attemptCount:attemptCount,$actionDetails:actionDetails) 
    $king:King($index:index) 
    (KingDie()
     and 
     not BurgDie()
     and 
     not BurgLiving()
    )
    or
    (BurgDie())
    or
    (BurgLiving())
    
    $livingPlayers:LivingPlayers($allReadys:players)
 then
   LogUtil.log(" king switch process start=============");   
  
      String kingID=getNextKingIDFromPlayers($allReadys,$index+1);		
        modify($king){setId(kingID),setIndex($index+1)}; 
        
        Message assignKingMessage=new Message(kingID,"assignKing",String.valueOf($attemptCount)); 
		insert(assignKingMessage);	
        LogUtil.log("assign king is   ================="+$king);
   
   LogUtil.log(" king switch process  over=============");
    
 
end



rule 'burg switch process'
ruleflow-group " switch process"
no-loop true
when
  //conditions all player description ready   
		
    $room:Room(status=="run")
    $game:Game($currentBurg:currentBurg) 
    $operater:Operater()
    $burg:Burg(id==$currentBurg,$attemptCount:attemptCount,$actionDetails:actionDetails,$memberCount:memberCount) 
    $king:King($index:index)
    (BurgDie())
    or
    (BurgLiving())
    
    $livingPlayers:LivingPlayers($allReadys:players)
 then
   LogUtil.log(" burg switch process start=============");   
  Message burgMessage=new Message(String.valueOf($currentBurg),"burgDetail",String.valueOf($memberCount)); 
  insert(burgMessage);

   
   LogUtil.log(" burg switch process  over=============");
    
 
end



//==person status ===over 

//==game status===start 


rule 'game over of  wolf win'
ruleflow-group "game status"
when
   
    $game:Game($recordName:recordName,unbombBurgCount>=3);  
    $room:Room(status=="run")
      
then 
     LogUtil.log("game over water win start  ================="); 

     LogUtil.log("game detail "+$game); 
    Message gameOver=new Message($recordName,"over","wolf win");   
    insert(gameOver);
      
      LogUtil.log("game over water win over  ================="); 
end

rule 'game over of  water win'
ruleflow-group "game status"
when
   
    $game:Game($recordName:recordName,bombBurgCount>=3);
    $room:Room(status=="run")
  
	      
      
then 
     LogUtil.log("game over water win start  ================="); 

     LogUtil.log("game detail "+$game); 
    Message gameOver=new Message($recordName,"over","water win");   
    insert(gameOver);
  
    
      
      LogUtil.log("game over water win over  ================="); 
end



rule 'game over of abortion'
ruleflow-group "game status"
when
    
     $game:Game($recordName:recordName);    
     Message(predict=="die",object=="logout")  
     
      
then 
     LogUtil.log("game over abortion start  ================="); 
    LogUtil.log("game detail "+$game); 
    Message gameOver=new Message($recordName,"over","abortion");   
    insert(gameOver);  
     LogUtil.log("game over abortion over  ================="); 
end


    

rule 'game over process '

ruleflow-group "game status"
no-loop true
when
     //$operater:Operater()  
     Message(predict=="over",$object:object)
     $game:Game($recordName:recordName);
     $room:Room(status=="run")     
     $all_login_ids:HashSet()
	      from accumulate(
	      Player($id:id)	     
	      init(Set ls=new HashSet();),
	      action(ls.add($id);),
	      result(ls)
	 );
	 $all_role:HashMap()
	      from accumulate(
	      $role:Role($id:id)	     
	      init(Map map=new HashMap();),
	      action(map.put($id,$role);),
	      result(map)
	      );
	      
	 
	 	 $all_right:HashMap()
	      from accumulate(
	      $right:Right($id:id)	     
	      init(Map map=new HashMap();),
	      action(map.put($id,$right);),
	      result(map)
	      );
	 
	 $operater:Operater()  
      
then 
     LogUtil.log("game over process  start  ================="); 
     String rightContent="say,ready";
     for(Object o:$all_login_ids){
            String uid=(String)o;
            Role role =(Role)$all_role.get(uid);
            if(role==null){
            
            
            }else{
            
               if("water".equals(role)){
             
             
              }else{
               //decryption or money or other 
                
                Message decryption=new Message(uid,"decryption",role.getRole());  
                 insert(decryption);
                
             }
            
               retract(role)
            
            }
            
            
            
            Right right =(Right)$all_right.get(uid);
            
            if(right==null){
               right= new Right(uid,convertString2Set(rightContent),false);
               insert(right);	
            }else{
               Set rights=convertString2Set(rightContent);
            
               modify(right){setRight(rights) ,setIsNotify(false)};
            
            
            }            
            
           
	     	
	  
            
        
	
	
     
     
     }
  
      modify($room){setStatus("unrun")};
       modify($operater){setGameOver(true),setRecordID(Long.valueOf($recordName))};
    
    
      LogUtil.log("game over process  over  ================="); 
end




//============game over = ============start 




//============game over =============over 

//===========switch ============start 


rule 'king die to dispatch phase switch prepare '
ruleflow-group "phase switch prepare"
no-loop true
when
	//conditions                                                                                                                                                               
	
    $room:Room(status=="run")   
    $game:Game($currentBurg:currentBurg) 
    $operater:Operater()
    $burg:Burg(id==$currentBurg,$attemptCount:attemptCount)
    KingDie()
    
then     
    LogUtil.log("king die to dispatch phase switch prepare start================= "); 
    StatusChange sc=new StatusChange("dispatch");
    insert(sc); 
    LogUtil.log("king die to dispatch phase switch prepare over================= "); 
end




rule 'dispatch phase to dismissal phase switch prepare '
ruleflow-group "phase switch prepare"
no-loop true
when
	//conditions    
	$message:Message($phase:subject,predict=="dispatch")	
    $room:Room(status=="run")   
    $game:Game(status=="dispatch",$currentBurg:currentBurg) 
    $operater:Operater()
    $burg:Burg(id==$currentBurg)
    not StatusChange()
    
then     
    LogUtil.log("dispatch phase to dismissal phase switch prepare start================= "); 
    StatusChange sc=new StatusChange("dismissal");
    insert(sc); 
    LogUtil.log("dispatch phase to dismissal phase switch prepare over================= "); 
end



rule 'dismissal phase to agree action phase switch prepare '
ruleflow-group "phase switch prepare"
no-loop true
when
	//conditions all player description ready    
    
    $room:Room(status=="run")
    $game:Game(status=="dismissal",$currentBurg:currentBurg) 
    $operater:Operater()
    $burg:Burg(id==$currentBurg,$attemptCount:attemptCount,$actionDetails:actionDetails)
    KingLiving()
    
then     
    LogUtil.log("dismissal phase to agree action phase switch prepare  start================= ");     
      StatusChange sc=new StatusChange("action");
      insert(sc); 
      
    LogUtil.log("dismissal phase to agree action phase switch prepare over================= "); 
end










rule 'action  to dispatch phase switch prepare '
ruleflow-group "phase switch prepare"
no-loop true
when
	//conditions    
  
    $room:Room(status=="run")
    $game:Game($currentBurg:currentBurg,status=="action",$unbombBurgCount:unbombBurgCount)
    $burg:Burg(id==$currentBurg,$memberCount:memberCount)
    $operater:Operater()
    (BurgLiving()) //somebody refuse bomb burg
    or
    (BurgDie())// or time end ,we think they dont want bomb burg
   
then     
    LogUtil.log("action  to dispatch phase switch prepare start================= "); 
    StatusChange sc=new StatusChange("dispatch");
    insert(sc);   
    LogUtil.log("action  to dispatch phase switch prepare over================= "); 
end





 





rule 'phase switch rule'
ruleflow-group "phase switch"
no-loop true
when
	//conditions    
	$statusChange:StatusChange($change:change)
    $room:Room(status=="run")
    $game:Game($currentBurg:currentBurg,$unbombBurgCount:unbombBurgCount) 
    $operater:Operater()    
    $burg:Burg(id==$currentBurg,$attemptCount:attemptCount,$result:result)
   
    
    
then      
	//actions 
     LogUtil.log("phase switch start================= "); 
     List tms=$operater.getTimerMessages();
    
    if("dispatch".equals($change)){
    
      //1.set game phase,set last time,
          
       modify($game){setStatus("dispatch"),setLastTime(System.currentTimeMillis())};
    
    
    
     //2.send delay timer of night    
	  Message deplayDispatchPhase=createDelayDispatchPhaseFromDispatchPhase($room);		
     tms.add(deplayDispatchPhase); 
	    
      Message currentDispatchPhase=createDisPatchPhase($room);
       //3.insert day come 
      insert(currentDispatchPhase); 
      

      
    
    
      
     
      
    
    }
    
    if("dismissal".equals($change)){
  
    
         
        //"topic"
    
   
           
           //1.set game phase,set last time,
          
          modify($game){setStatus("dismissal"),setLastTime(System.currentTimeMillis())};
            LogUtil.log("phase switch start================= "+$game); 
          //2.send timer of day    
	     Message delayDispatchPhase=createDelayDispatchPhaseFromDismissalPhase($room);
         tms.add(delayDispatchPhase); 
      
       
           //3.insert day come 
          insert(createDismissalPhase($room)); 
        LogUtil.log("phase switch start================= "+tms); 
    
    }
    
    
     if("action".equals($change)){
  
    
         
        //"topic"
    
   
       
       
           //1.set game phase,set last time,
          
          modify($game){setStatus("action"),setLastTime(System.currentTimeMillis())};
          //2.send timer of day    
	     Message dayDelay=createDelayDispatchPhaseFromActionPhase($room);
         tms.add(dayDelay); 
    
           //3.insert day come 
          insert(createActionPhase($room)); 
          
          
    
    
    }
    
    
      modify($operater){setTimerMessages(tms)};
   
      retract($statusChange);
     LogUtil.log("phase switch  over =================");   
end



//===========switch ============over 

//===========phase prepare ============start  

rule 'dispatch phase prepare other right'
ruleflow-group "phase prepare"
no-loop true
when
	//conditions
	$player:Player(status=="living",$uid:id)
	$message:Message($subject:subject,predict=="time",subject=="dispatch")	 
    Room(status=="run")
    Game(status=="dispatch")
    $right:Right(id==$uid)
    King($id:id)
    Role(id!=$id,id==$uid,$role:role)
then      
	//actions 
     LogUtil.log("'dispatch phase prepare other right start================= "); 
  
  
     modify($right){setRight(convertString2Set("say")) ,setIsNotify(false)};    	
	

          
     LogUtil.log("'dispatch phase prepare other right  over =================");   
end


rule 'dispatch phase prepare king right'
ruleflow-group "phase prepare"
no-loop true
when
	//conditions
	$player:Player(status=="living",$uid:id)
	Message($subject:subject,predict=="time",subject=="dispatch")	 
    Room(status=="run")
    Game(status=="dispatch")
    $right:Right(id==$uid)
    King(id==$uid)
    Role(id==$uid,$role:role)
then      
	//actions 
     LogUtil.log("'dispatch phase prepare king right start================= "); 
  
  
     modify($right){setRight(convertString2Set("say,dispatch")),setIsNotify(false)};    	
	
	
     LogUtil.log("'dispatch phase prepare king right  over =================");   
end

rule 'dismissal phase prepare  right'
ruleflow-group "phase prepare"
no-loop true
when
	//conditions
	$player:Player(status=="living",$uid:id)
	Message($subject:subject,predict=="time",subject=="dismissal")	 
    Room(status=="run")
    Game(status=="dismissal")
    $right:Right(id==$uid)   
    Role(id==$uid,$role:role)
then      
	//actions 
     LogUtil.log("'dismissal phase prepare  right start================= "); 
  
  
     modify($right){setRight(convertString2Set("say,dismissal")),setIsNotify(false)};    	
	

          
     LogUtil.log("'dismissal phase prepare king right  over =================");   
end

rule 'action phase prepare action member right'
ruleflow-group "phase prepare"
no-loop true
when
	//conditions
	$player:Player(status=="living",$uid:id)
	Message($subject:subject,predict=="time",subject=="action")	 
    Room(status=="run")
    Game(status=="action")
    $right:Right(id==$uid)
    BombAction(id==$uid)
    Role(id==$uid,$role:role)
then      
	//actions 
     LogUtil.log("action phase prepare member right start================= "); 
  
  
     modify($right){setRight(convertString2Set("action")),setIsNotify(false)};    	
	
     LogUtil.log("'action phase prepare member right  over =================");   
end

//===========phase prepare============over 

//===========message accept============start 



rule 'single accept of assign'
ruleflow-group "message accept"
salience 100
no-loop true 
when
     $message:Message($subject:subject,predict=="assign",$object:object,$accepts:accepts)   
	 
	 
then
     LogUtil.log(" single accept of assign start  ============="+$message);        
     $accepts.add($object); 
     modify($message){setAccepts($accepts)};    
    LogUtil.log("single accept of assign over =============");
    
end

rule 'single accept of action'
ruleflow-group "message accept"
salience 100
no-loop true 
when
     $message:Message($subject:subject,predict=="action",$accepts:accepts)   
	 
	 
then
     LogUtil.log(" single accept of action start  ============="+$message);        
     $accepts.add($subject); 
     modify($message){setAccepts($accepts)};    
    LogUtil.log("single accept of action over =============");
    
end

  
rule 'single accept of right'
ruleflow-group "message accept"
salience 100
no-loop true 
when
     $message:Message($subject:subject,predict=="right",$object:object,$accepts:accepts)   
	 
	 
then
     LogUtil.log(" single accept of right start  ============="+$message); 
     $accepts.add($subject);        
     modify($message){setAccepts($accepts)};    
    LogUtil.log(" single accept of right over =============");
    
end




rule 'all accept of all'
ruleflow-group "message accept"
salience 0
no-loop true 
when
    $message:Message($accepts:accepts)   
	eval($message.getAccepts().size()==0)
   $all_login_ids:HashSet()
	      from accumulate(
	      Player($id:id)	     
	      init(Set ls=new HashSet();),
	      action(ls.add($id);),
	      result(ls)
	      );
	 
then
     LogUtil.log($all_login_ids+" all accept start  ============="+$message);         
     modify($message){setAccepts(new ArrayList($all_login_ids))};    
    LogUtil.log("all accept over ============="+$message);
    
end








rule 'game player query'
ruleflow-group "query"
when
	//conditions
    $message:Message($subject:subject,predict=="query")
    $room:Room()
    $allLogins:ArrayList()
	      from accumulate(
	      $person:Player()	     
	      init(List ls=new ArrayList();),
	      action(ls.add($person);),
	      result(ls)
	      );
	
	
	$game:Game($status:status,$currentBurg:currentBurg);  
    $operater:Operater()
    $right:Right(id==$subject)
    $role:Role(id==$subject,$r:role)
    $king:King()
      $burg:Burg(id==$currentBurg)
    
then      

	 LogUtil.log("get player query info =================");	 
      Map m=new HashMap();
      m.put("room",$room);
      m.put("person",$allLogins);
      m.put("right",$right);
      setRemainTime($status,$game,$room) ; 
      m.put("game",$game);     
      m.put("role",$role);          
      m.put("king",$king);
        m.put("burg",$burg);
          
      $operater.setSnapshots(GsonUtil.toJson(m));     
      retract($message);   
	  LogUtil.log("get player query info over =================");
end



rule 'game unplayer query'
ruleflow-group "query"
when
	//conditions
    $message:Message($subject:subject,predict=="query")
   $room:Room()
    $allLogins:ArrayList()
	      from accumulate(
	      $person:Player()	     
	      init(List ls=new ArrayList();),
	      action(ls.add($person);),
	      result(ls)
	      );	      
	
	$right:Right(id==$subject)
	$game:Game($status:status,$currentBurg:currentBurg);  
    $operater:Operater() 
    not Role(id==$subject)
    $king:King()
    $burg:Burg(id==$currentBurg)
    
then      
	 LogUtil.log("get unplayer query info =================");  
      Map m=new HashMap();
      m.put("room",$room);
      m.put("person",$allLogins);   
      
     setRemainTime($status,$game,$room) ;
      m.put("game",$game);   
     
        m.put("right",$right);    
        m.put("king",$king);
        m.put("burg",$burg);
        

      $operater.setSnapshots(GsonUtil.toJson(m));     
      retract($message);
    	//actions
	LogUtil.log("get unplayer query info over =================");
end



//========================retract game start =========================


rule 'retract game'
ruleflow-group "retract game"
when
	//conditions
	$room:Room(status=="unrun") 
	$game:Game()
then      
	//actions
     LogUtil.log("retract game start================= ");  
     retract($game);
     LogUtil.log("retract game over ================="); 
    
end

//========================retract game over =========================


//========================game record start =========================

rule 'record'
ruleflow-group "record"
when
	//conditions
	$game:Game(); 
    $operater:Operater()     
then      
	 LogUtil.log("record start=================");       

      JobLogger.logMessages($game.getRecordName(), $operater.getNextMessages());
	LogUtil.log("record over =================");
end

//========================game record over =========================


