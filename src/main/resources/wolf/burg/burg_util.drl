package drools.common

import drools.common.*
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.Map;
import java.util.Collections;



import org.apache.commons.lang.StringUtils;




function void setRemainTime(String status,Game game,Room room) {
     
     String statusTime=status+"Time";    
     
     Long setting=Long.valueOf(getRoomSetting(room,statusTime,"-1"));
      Long lastTime=game.getLastTime();
      Long time=lastTime+setting-System.currentTimeMillis();
      if(time < 0){
            LogUtil.log("=========== remain time wrong ======= "+time);          
      }else{
          game.setRemainTime(time);
      }
     
       
}

function String  getNextKingIDFromPlayers(List players,int index) {
         
       int next=index+1;
      if(next>=players.size()){
         next=next%players.size();
      }
       LogUtil.log(players+" =========== next index ======= "+next); 
     
     Object o=  players.get(next);
     Player p=(Player)o;
     return p.getId();
	    
}

    
function Integer  initWolfCount(Integer all) {
  
    	 Integer[] wolf=new Integer[]{2,2,3,3,3,4};
    	 return wolf[all-5];
}  
        


function List<Burg>  initBurgs(String king,Integer all) {
  
    	   Map<Integer,Integer[]> memberConfig=new HashMap<Integer,Integer[]>();
	   memberConfig.put(5, new Integer[]{2,3,2,3,3});
	   memberConfig.put(6, new Integer[]{2,3,4,3,4});
	   memberConfig.put(7, new Integer[]{2,3,3,4,4});
	   memberConfig.put(8, new Integer[]{3,4,4,5,5});
	   memberConfig.put(9, new Integer[]{3,4,4,5,5});
	   memberConfig.put(10, new Integer[]{3,4,4,5,5});
	  
	   Map<Integer,Integer[]> bombWolfConfig=new HashMap<Integer,Integer[]>();
	   bombWolfConfig.put(5, new Integer[]{1,1,1,1,1});
	   bombWolfConfig.put(6, new Integer[]{1,1,1,1,1});
	   bombWolfConfig.put(7, new Integer[]{1,1,1,2,1});
	   bombWolfConfig.put(8, new Integer[]{1,1,1,2,1});
	   bombWolfConfig.put(9, new Integer[]{1,1,1,2,1});
	   bombWolfConfig.put(10, new Integer[]{1,1,1,2,1});
	    
	   
    
    List<Burg> burgs=new ArrayList();
     
      for(int i=1;i<6;i++){
          int memberCount=memberConfig.get(all)[i-1];  
           int bombWolfCount=bombWolfConfig.get(all)[i-1]; 
               
          Map acs=new HashMap();
          for(int attemptCount=1;attemptCount<=3;attemptCount++){                       
            ActionDetail ad=new ActionDetail(attemptCount,new ArrayList(),"unknown","");
             acs.put(Integer.valueOf(attemptCount),ad);
          
          }
          
          Burg burg=new Burg(i,acs,"unknown",memberCount,1,bombWolfCount);
          burgs.add(burg);
      
      }
      Object o= burgs.get(0).getActionDetails().get(1);
      ActionDetail a=(ActionDetail)o;
      a.setKing(king);
      return burgs;
}




function List<String>  getIDFromPlayer(List players) {

      List<String> pids=new ArrayList();
	    for(Object o:players){
	          Player p=(Player)o;			 
			  pids.add(p.getId());
		}
		return pids;
}







function Message createDelayDispatchPhaseFromDispatchPhase(Room room) {

    String  time=getRoomSetting(room,"dispatchTime","30000");//1*60*1000 
    Message night=new Message("dispatch","switch",time);
    String  schedule=getRoomSetting(room,"dispatchTime","30000");//1*60*1000
    night.setScheduledTime(Long.valueOf(schedule));
    night.setWhere(room.getId());
    
    return night;
  
}
function Message createDelayDispatchPhaseFromActionPhase(Room room) {

    String  time=getRoomSetting(room,"dispatchTime","30000");//1*60*1000 
    Message night=new Message("dispatch","switch",time);
    String  schedule=getRoomSetting(room,"actionTime","30000");//1*60*1000
    night.setScheduledTime(Long.valueOf(schedule));
    night.setWhere(room.getId());
    
    return night;
  
}

function Message createDelayDispatchPhaseFromDismissalPhase(Room room) {

    String  time=getRoomSetting(room,"dispatchTime","30000");//1*60*1000 
    Message night=new Message("dispatch","switch",time);
    String  schedule=getRoomSetting(room,"dismissalTime","30000");//1*60*1000
    night.setScheduledTime(Long.valueOf(schedule));
    night.setWhere(room.getId());
    
    return night;
  
}




function Message createDelayActionPhase(Room room) {

    String  time=getRoomSetting(room,"actionime","30000");//1*60*1000 
    Message night=new Message("action","switch",time);
    String  schedule=getRoomSetting(room,"dismismalTime","15000");//1*60*1000
    night.setScheduledTime(Long.valueOf(schedule));    
     night.setWhere(room.getId());
    
    return night;
  
}

function Message createDelayDayOfDescription(Room room) {

    String  time=getRoomSetting(room,"dayTime","30000");//1*60*1000 
    Message night=new Message("day","switch",time);
    String  schedule=getRoomSetting(room,"descriptionTime","15000");//1*60*1000
    night.setScheduledTime(Long.valueOf(schedule));    
     night.setWhere(room.getId());
    
    return night;
  
}




function Message createDisPatchPhase(Room room) {
    String  dayTime=getRoomSetting(room,"dispatchTime","30000");//1*60*1000
    Message day=new Message("dispatch","time",dayTime);
 
     return day;
   
  
}


    
    function Message createDismissalPhase(Room room) {
    String  dayTime=getRoomSetting(room,"dismissalTime","30000");//1*60*1000
    Message day=new Message("dismissal","time",dayTime);
 
     return day;
   
  
}
    function Message createActionPhase(Room room) {
    String  dayTime=getRoomSetting(room,"actionTime","30000");//1*60*1000
    Message day=new Message("action","time",dayTime);
 
     return day;
   
  
}





   
function List<String> parseMembers(String object) {
     String[] contents=object.split(",");
     return Arrays.asList(contents);
  
} 












