package drools.common

import drools.common.*
import com.gemantic.killer.common.model.Message
import com.gemantic.killer.common.model.Operater;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import  com.gemantic.common.util.json.GsonUtil;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.lang.math.RandomUtils;
import org.apache.commons.lang.StringUtils;
import com.gemantic.killer.util.*;







//========== retract unlimit message 

rule 'retract unlimit message'
ruleflow-group "retract unlimit message"
when
	//conditions
    
    $message:Message($subject:subject,predict!="query")
    $plaery:Player(id==$subject,status=="unready")	
    Game()
    
    
then      
	//actions
     LogUtil.log("retract unlimit message start================= ");
       retract($message);  
     LogUtil.log("retract unlimit message over ================="); 
    
end




//========================query group start =========================




rule 'create snapshot'
ruleflow-group "create snapshot"
when
	//conditions
    
    Message($id:id)
    not Snapshot()
    
then      
	//actions
     LogUtil.log("create snapshot start================= ");
     Snapshot snapshot=new Snapshot($id);   
     insert(snapshot);
     LogUtil.log("create snapshot over ================="); 
    
end


rule 'log snapshot'
ruleflow-group "log snapshot"
when
	//conditions
    
     
     
    $room:Room()
    $allLogins:ArrayList()
	      from accumulate(
	      $person:Player()	     
	      init(List ls=new ArrayList();),
	      action(ls.add($person);),
	      result(ls)
	      );
	$game:Game($status:status)
    $operater:Operater($id:id)  
    $snapshot:Snapshot(id==$id)
    $roles:ArrayList()
	      from accumulate(
	      $role:Role()	     
	      init(List ls=new ArrayList();),
	      action(ls.add($role);),
	      result(ls)
	      );
	 $votes:ArrayList()
	      from accumulate(
	      $vote:Vote()	     
	      init(List ls=new ArrayList();),
	      action(ls.add($vote);),
	      result(ls)
	      );
     
    
then      
	//actions
     LogUtil.log("log snapshot start================= ");
     
      Map m=new HashMap();
      m.put("room",$room);
      m.put("person",$allLogins);      
       m.put("game",$game);    
       m.put("roles",$roles);   
       m.put("votes",$votes);  
       m.put("time",System.currentTimeMillis());      
     
      JobLogger.logMessages($game.getRecordName(), $operater.getNextMessages());
      //JobLogger.log($game.getRecordName(),json4.toString());
     retract($snapshot);
     LogUtil.log("log snapshot over ================="); 
    
end



rule 'clear snapshot '
ruleflow-group "remove snapshot"
when
	//conditions
	
	$snapshot:Snapshot($id:id)
	not Message(id==$id)
    
     
    
then      
	//actions
     LogUtil.log("clear snapshot start================= ");
     retract($snapshot);  
     LogUtil.log("clear snapshot over ================="); 
    
end






rule 'retract game'
ruleflow-group "game over"
when
	//conditions
	$room:Room(status=="unrun") 
	$game:Game($status:status,$recordName:recordName)
    $operater:Operater()  
     
    
then      
	//actions
     LogUtil.log("remove snapshot start================= ");
     $operater.setRecordID(Long.valueOf($recordName));
     retract($game);  
     
     LogUtil.log("remove snapshot over ================="); 
    
end













//========================action group start =========================



rule 'logout clear role'
ruleflow-group "clear role action"
when
	//conditions
    
    $role:Role($id:id)
    not Player(id==$id)
    
then      
	//actions
     LogUtil.log("logout clear role ================= ");   
     retract($role);
     LogUtil.log("logout clear role over ================="); 
    
end










rule 'game init'
ruleflow-group "game init"
when
	
    $message:Message(predict=="start",$time:time)
    
  
     $all_login_ids:HashSet()
	      from accumulate(
	      Player($id:id)	     
	      init(Set ls=new HashSet();),
	      action(ls.add($id);),
	      result(ls)
	      );
    
    
   
    $allReadys:ArrayList()
	      from accumulate(
	      $person:Player(status=="ready")	     
	      init(List ls=new ArrayList();),
	      action(ls.add($person);),
	      result(ls)
	      );
    
    $room:Room(status=="unrun")    
     $operater:Operater()
then      

	LogUtil.log("game init process start ================="+$room);
	LogUtil.log($allReadys);
	 int  killerCount=Integer.valueOf(getRoomSetting($room,"killerCount","1"));//1*60*1000  
	 int waterCount= $allReadys.size()-killerCount;
	 
	 Map<String,Integer> role_count=new HashMap();
		role_count.put("killer", killerCount);
		role_count.put("water", waterCount);
		List<String> ls=new ArrayList();
		List<Long> readyIDS=new ArrayList();
	    for(Object o:$allReadys){
	          Player p=(Player)o;
			  ls.add(p.getId());
			  readyIDS.add(Long.valueOf(p.getId()));
		}
		
		
			
	
	 String	rname=String.valueOf(RandomUtils.nextLong());	
	
	Map<String,String>	ids_role=RoleUtil.assingRole(role_count,ls);
		LogUtil.log("============================ role is "+ids_role);
		for(Object o: $allReadys){
			      Player p=(Player)o;
			      	LogUtil.log(p);
			    String uid=p.getId();
			    String role=ids_role.get(uid);
			      p.setStatus("living");	  
				  update(p);
				  
				  Role r=new Role(uid,role);
				  insert(r);	  
				  Message assignMessage=new Message(role,"assign",uid); 
				  insert(assignMessage);	  
				  
				   Message livingMessage=new Message(uid,"living",""); 
				  insert(livingMessage);
				  
				   Vote vote=new Vote(uid,new HashSet(),"");
                   insert(vote);
				 
		
		
		JobLogger.logMessages(rname,Arrays.asList(new Message[]{new Message(uid,"ready",""),new Message(uid,"login","")}));	
		
	  	
			
		}
	
	
	 
	 
	 
	 
	 
	Game game=new Game("ready",$allReadys.size(),waterCount,killerCount,System.currentTimeMillis(),0L,$time,rname);
	insert(game);
	
	
	LogUtil.log(" game status  ================="+game);
	//create log 
		
	
	$room.setStatus("run");	
	
	update($room);
	
		LogUtil.log(" room status  ================="+$room);
	
	$operater.setGameStart(true);
	$operater.setPlayers(readyIDS);
	
	
	LogUtil.log("game init process over  =================");
end



























//========================role group start =========================

rule 'clear all role when new game start'
ruleflow-group "clear role"

when

   
 
   $message:Message(predict=="start")
   $person:Player($id:id)
   $role:Role(id==$id)
   
   
then  

   LogUtil.log("clear all role  start  ================="); 
   retract($role); 
   LogUtil.log("clear all role  over  ================="); 
end




rule 'clear killvote when not night '
ruleflow-group "clear role"
//这时候被杀的人没有死吧.
when
	
   
    //kill
 
    $game:Game(status!="night")   
    $room:Room(status=="run")  
	$killed:KillVote()	     
	
    
then     
     LogUtil.log("clear killvote when not night   start=============");        
     retract($killed);
     LogUtil.log("clear killvote when not night   over =============");    
end

//========================say group over =========================



//========================role group start =========================

rule 'clear all vote when new game start'
ruleflow-group "clear vote at start"

when

   
 
   $message:Message(predict=="start")
   $person:Player($id:id)
   $vote:Vote(id==$id)
   
   
then  

   LogUtil.log("clear vote at start  start  ================="); 
   retract($vote); 
   LogUtil.log("clear vote at start over  ================="); 
end









//========================say group over =========================










//========================vote group start =========================

rule 'change vote'
ruleflow-group "vote"
no-loop true 
when
    $message:Message($subject:subject,$object:object,predict=="vote")
    $voter:Vote(id==$subject,$oldVoted:vote)
    $right:Right(id==$subject,right contains "vote")
    $newPlayer:Player(id==$object,status=="living")
    $newPlayerVote:Vote(id==$object)
    $oldPlayer:Player(id==$oldVoted,status=="living")
    $oldPlayerVote:Vote(id==$oldVoted)
    eval($oldVoted!=$object)
    $game:Game(status=="day")
then
    LogUtil.log("change vote  start  ================="); 
    
    $voter.setVote($object);
    $oldPlayerVote.getVoters().remove($subject);
    $newPlayerVote.getVoters().add($subject);   
    Message add=new Message($newPlayer.getId(),"set vote",String.valueOf($newPlayerVote.getVoters().size()));
     insert(add);
    Message subtract=new Message($oldPlayer.getId(),"set vote",String.valueOf($oldPlayerVote.getVoters().size()));
     insert(subtract); 
     update($voter);
     update($newPlayer);
     update($oldPlayer);
     
       
     
     
    LogUtil.log("change vote over  ================="); 
end


rule 'first vote'
ruleflow-group "vote"
no-loop true 
when
    $message:Message($subject:subject,$object:object,predict=="vote")
    $voter:Vote(id==$subject,vote=="")
    $right:Right(id==$subject,right contains "vote")
    $newVoted:Player(id==$object,status=="living")
    $newPlayerVoter:Vote(id==$object)
     $game:Game(status=="day")
    
then
    LogUtil.log("first vote start  ================="); 
    
    $voter.setVote($object);
    update($voter);
    
    $newPlayerVoter.getVoters().add($subject);     
     update($newPlayerVoter);
    
     Message add=new Message($newVoted.getId(),"set vote",String.valueOf($newPlayerVoter.getVoters().size()));
     insert(add); 
     
      LogUtil.log("first vote over  ================="); 
end







rule 'clear vote'
ruleflow-group "clear vote"
when
    $message:Message($subject:subject,$object:object,predict=="clear vote")
    $person:Vote($vote:vote,$voters:voters)  
    eval($voters.size() > 0||$vote!="")
then
    LogUtil.log("clear vote start  ================="); 
    
    $person.setVote("");
    $person.setVoters(new HashSet());
     update($person);   
      Message add=new Message($person.getId(),"set vote","0");
     insert(add);
     LogUtil.log("clear vote vote over  ================="); 
end



rule 'retract vote'
ruleflow-group "clear vote"
when
    $message:Message($subject:subject,$object:object,predict=="retract vote")
    $vote:Vote()  
    
then
    LogUtil.log("retract vote start  =================");
    LogUtil.log("retract vote start  ================= "+$vote);    
    retract($vote);
     LogUtil.log("retract vote vote over  ================="); 
end



rule 'clear retract vote message'
ruleflow-group "clear vote"
when
    $message:Message($subject:subject,$object:object,predict=="retract vote")
    not Vote()      
then
    LogUtil.log("retract vote  message clear start  =================");
  
    retract($message);
     LogUtil.log("retract vote message clear  over  ================="); 
end






//========================vote group over =========================


//========================kill group start =========================

rule 'first kill'
ruleflow-group "player status"
 no-loop true

when
    $message:Message($subject:subject,$object:object,predict=="kill")
    $person:Player(id==$object,status=="living")
    $game:Game(status=="night")
    not  KillVote(id==$subject)
   
 
then  
 
     LogUtil.log("first kill start =================");      
    
     KillVote kv=new KillVote($subject,$object);
     insert(kv);
     
     LogUtil.log("first kill start ================= "+kv);  
  
    LogUtil.log("first kill start over  ================="); 
 
end


rule 'change kill'
ruleflow-group "player status"
 no-loop true

when
    $message:Message($subject:subject,$object:object,predict=="kill")
    $person:Player(id==$object,status=="living")
    $game:Game(status=="night")
    $kv:KillVote(id==$subject)
   
then  
 
     LogUtil.log("change kill start ================="); 
     $kv.setKill($object);
     update($kv);     
     
   LogUtil.log("change kill start ================= "+$kv);  
  
    LogUtil.log("change kill over ================="); 
 
end


rule 'kill die '
ruleflow-group "player status"

when
    $message:Message($subject:subject,$object:object,predict=="kill")    
    $killVoters:ArrayList()
	      from accumulate(
	      $killed:KillVote(kill==$object)	     
	      init(List ls=new ArrayList();),
	      action(ls.add($killed);),
	      result(ls)
	);    
	
	$allkillVoters:ArrayList()
	      from accumulate(
	      $killed:KillVote()	     
	      init(List ls=new ArrayList();),
	      action(ls.add($killed);),
	      result(ls)
	);   
    $person:Player(id==$object,status=="living")    
    $game:Game(status=="night",$killerCount:killerCount)
    eval($killVoters.size()==$killerCount) 
 
then  
 
    LogUtil.log("kill die  start=============="); 
    
    $person.setStatus("lastword");
     update($person); 
     
     for(Object o:$allkillVoters){
     
       KillVote kv=(KillVote)o;
       retract(kv);
     }
      
   
    LogUtil.log("kill die  start over  ================="); 
 
end






//========================kill group over =========================

//========================die group start =========================


rule 'water die process count'
ruleflow-group "game live count"
when
 $game:Game($liverCount:liverCount,$waterCount:waterCount);
 $die:Die($id:id,$type:type); 
 $role:Role(id==$id,role=="water")
then  
     LogUtil.log("water die process start  ================="); 
     
     LogUtil.log(" liver count "+$liverCount);
     LogUtil.log(" water count "+$liverCount);
     $game.setLiverCount($liverCount-1);
     $game.setWaterCount($waterCount-1);
     update($game);     
     
     LogUtil.log(" after water die liver count "+  $game.getLiverCount());
     LogUtil.log("after water di  water count "+$game.getWaterCount());
     
     //LogUtil.log(" after die game status "+$game);    
    
     
     Message dieMessage=new Message($id,"die",$type);   
     insert(dieMessage);
     
     retract($die);
end     


rule 'killer die process count'
ruleflow-group "game live count"
when
 $game:Game($liverCount:liverCount,$killerCount:killerCount);
 $die:Die($id:id,$type:type); 
 $role:Role(id==$id,role=="killer")
then  
     LogUtil.log("killer die process start  ================="); 
       LogUtil.log(" liver count "+$liverCount);
        LogUtil.log(" water count "+$liverCount);
     
    $game.setLiverCount($liverCount-1);
     $game.setKillerCount($killerCount-1);
     update($game);
     //LogUtil.log(" after die game status "+$game);
        LogUtil.log(" after water die liver count "+$liverCount);
     LogUtil.log("after water di  water count "+$liverCount);
     
     Message dieMessage=new Message($id,"die",$type);   
     insert(dieMessage);
     
     retract($die);  
     LogUtil.log("killer die process process over  ================="); 

end


rule 'killer logout  process count'
ruleflow-group "game live count"
no-loop true
when
 $game:Game($liverCount:liverCount,$killerCount:killerCount);
 $message:Message($subject:subject,predict=="logout")
 $role:Role(id==$subject,role=="killer")
  $person:Player(id==$subject,status=="living")  
then  
     LogUtil.log("killer logout game live count start  ================="); 
      
        LogUtil.log("  liver count "+$liverCount);
     LogUtil.log(" water count "+$liverCount);
    $game.setLiverCount($liverCount-1);
    $game.setKillerCount($killerCount-1);
     update($game);
     
        LogUtil.log(" after killer logout  liver count "+$liverCount);
     LogUtil.log("after killer logout  water count "+$liverCount);
     LogUtil.log("killer logout game live count over  ================="); 

end



rule 'water logout  process count'
ruleflow-group "game live count"
no-loop true
when
 $game:Game($liverCount:liverCount,$waterCount:waterCount);
 $message:Message($subject:subject,predict=="logout")
 $role:Role(id==$subject,role=="water")
  $person:Player(id==$subject,status=="living")  
then  
     LogUtil.log("water logout game live count start  ================="); 
       LogUtil.log("  liver count "+$liverCount);
     LogUtil.log(" water count "+$liverCount);
     
    $game.setLiverCount($liverCount-1);
    $game.setWaterCount($waterCount-1);
    
     update($game);
     
       LogUtil.log(" after water logout  liver count "+$liverCount);
     LogUtil.log("after water logout  water count "+$liverCount);
     LogUtil.log("water logout game live count over  ================="); 

end



rule 'person die by voted'
ruleflow-group "player status"
when
     $game:Game($liverCount:liverCount);
     $person:Player($id:id,status=="living");
     $vote:Vote(id==$id)     
     eval(($vote.getVoters().size() * 2) > $liverCount )
     Role(id==$id,$role:role)
     not Die();
then 
     LogUtil.log("voted die game process start  ================="); 
    $person.setStatus("die");   
    $vote.setVoters(new HashSet());   
    update($person);   
      
    Die die=new Die($id,"vote");
    insert(die);    
    
    Message roleMessage=new Message($id,"role",$role);   
    insert(roleMessage);
    
    LogUtil.log("voted die game process over,should be run water die or kill die  ================="); 
end



rule 'game over status '

ruleflow-group "clear player status"
when
     $message:Message(predict=="over")	 
     $person:Player(status!="unready");
     
then 
     LogUtil.log("game over status start  ================="); 
    $person.setStatus("unready");   
    update($person);   
    
  
    LogUtil.log("game over status over  ================="); 
end

 




rule 'no user lastword, player die '
ruleflow-group "player status"

when
	
   
    //kill
    $message:Message(predict=="time",subject=="day")   
    $game:Game(status=="lastword")   
    $room:Room(status=="run")
    $lastworder:Player($id:id,status=="lastword");
then     
     LogUtil.log("no user lastword, player die  start  =============");        
     $lastworder.setStatus("die");
     update($lastworder);
     
    Die die=new Die($lastworder.getId(),"kill");
    insert(die);
     LogUtil.log("no user lastword, player die over =============");    
end




rule 'user lastword, player die '
ruleflow-group "player status"

when
	
	$message:Message(predict=="lastword",$subject:subject)   
    $game:Game(status=="lastword")     
    $room:Room(status=="run")
    $lastworder:Player(id==$subject,status=="lastword");
then     
     LogUtil.log("user lastword, start  =============");        
     $lastworder.setStatus("die");
     update($lastworder);
     
    Die die=new Die($lastworder.getId(),"kill");
    insert(die);
     LogUtil.log("user lastword, over =============");    
end






















rule 'game over killer win'
ruleflow-group "game status"
when
   
     $game:Game($killerCount:killerCount,$waterCount:waterCount,$recordName:recordName);
     eval($killerCount >= $waterCount)  
     $room:Room(status=="run")
  
	      
      
then 
     LogUtil.log("game over kill win start  ================="); 

    
    Message gameOver=new Message($recordName,"over","killer win");   
    insert(gameOver);
  
   
  
    
      
      
      LogUtil.log("game over kill win over  ================="); 
end

rule 'game over water win'

ruleflow-group "game status"
when
     //$operater:Operater()  
     $game:Game($killerCount:killerCount,$waterCount:waterCount,$recordName:recordName);
     eval($killerCount == 0 )  
     $room:Room(status=="run")
      
then 
     LogUtil.log("game over water start  ================="); 
  
    Message gameOver=new Message($recordName,"over","water win");   
    insert(gameOver);    
  
      LogUtil.log("game over water over  ================="); 
end





rule 'game over process'

ruleflow-group "game status"
no-loop true
when
     $operater:Operater()  
     $message:Message(predict=="over")	
     $room:Room(status=="run")
     $game:Game()
     $roles:ArrayList()
	      from accumulate(
	      $role:Role()	     
	      init(List ls=new ArrayList();),
	      action(ls.add($role);),
	      result(ls)
	      );
      
then 
     LogUtil.log("game over process  ================="); 
      Message clear=new Message("-500","retract vote","");  
      insert(clear);
    
    
      Message dec=new Message("-500","ready decryption","");
      insert(dec);
    
     
     Message money=new Message("-500","money","1000");
      insert(money);
  
     $operater.setGameOver(true);
     $room.setStatus("unrun");
     update($room);
     
      
      LogUtil.log("game over process  ================="); 
end



rule 'logout decryption'

ruleflow-group "decryption"
no-loop true
when
     $operater:Operater()  
     $message:Message($subject:subject,predict=="logout")
    
     $game:Game()
     Role(id==$subject,$role:role)
     Player(id==$subject,status!="die");
      
then 
     LogUtil.log("logout decryption process  ================="); 
    
	Message decryption=new Message($subject,"decryption",$role);  
     insert(decryption);
     LogUtil.log("logout decryption process  ================= "+decryption); 	
     
end


rule 'decryption process'

ruleflow-group "decryption"
no-loop true
when
     $operater:Operater()  
     $message:Message(predict=="ready decryption")	
    
     $game:Game()
     $roles:ArrayList()
	      from accumulate(
	      $role:Role(role=="killer")	     
	      init(List ls=new ArrayList();),
	      action(ls.add($role);),
	      result(ls)
	      );
      
then 
     LogUtil.log("game decryption process  ================="); 
    for(Object o:$roles){
	          Role  r=(Role)o;
			 Message decryption=new Message(r.getId(),"decryption",r.getRole());  
             insert(decryption);
             LogUtil.log("game decryption process  ================= "+decryption); 
	}
	retract($message);
      
      LogUtil.log("game over process  ================="); 
end




    

//========================die group over =========================





rule 'person die by voted,send night come '
ruleflow-group "game phase status"

when
	//conditions	
    $message:Message(predict=="die",object=="vote")   
    $game:Game(status=="day") 
    $room:Room(status=="run")
then     
    LogUtil.log("person die by voted,send night come  start=============");  
     

     String  timeSetting=getRoomSetting($room,"nightTime","15000");//1*60*1000  
     Message night=new Message("night","time",timeSetting);   
     insert(night);   
     LogUtil.log(" person die by voted,send night come   oveer =============");   
 
end






//========================game status group start =========================
rule 'night come '
ruleflow-group "game phase status"

when
	//conditions	
    $message:Message(predict=="time",subject=="night")   
    $game:Game(status=="day") 
    $room:Room(status=="run")
then     
    LogUtil.log("night come start=============");   

    Message clear=new Message("-500","clear vote","");  
    insert(clear);      

     $game.setStatus("night");     
     $game.setLastTime(System.currentTimeMillis());     
   
     update($game);


      String  timeSetting=getRoomSetting($room,"dayTime","30000");//1*60*1000   
    Message day=new Message("day","send time",timeSetting);
    String  time=getRoomSetting($room,"nightTime","15000");//1*60*1000
    day.setScheduledTime(Long.valueOf(time));   
     insert(day);    
    
   
     LogUtil.log(" night come  over ============= ,will sent day come time after "+time);   
 
end



rule 'kill person lastword come'
ruleflow-group "game phase status"
when
    Game(status=="night")
    $message:Message($subject:subject,$object:object,predict=="kill")  
    not Message(subject=="lastword",predict=="time")
    $room:Room(status=="run")
    Player(id==$object,status=="lastword")
 
then  
 
     LogUtil.log("kill game process start  =================");   
    String  timeSetting=getRoomSetting($room,"lastwordTime","15000");//1*60*1000    
    Message lastWord=new Message("lastword","time",timeSetting);       
    insert(lastWord);  
     Message lastWorder=new Message($object,"status","lastword");       
    insert(lastWorder);  
    
    LogUtil.log("kill game process over  ================="); 
 
end





rule 'kill,lastword come '
ruleflow-group "game phase status"

when
	//conditions	
    $message:Message(predict=="time",subject=="lastword")   
    $game:Game(status=="night")   
    $room:Room(status=="run")
then     
        
     LogUtil.log(" lastword come start =============");   
 
     $game.setStatus("lastword");
     $game.setLastTime(System.currentTimeMillis());
      LogUtil.log("lastword come start = time ============= "+$game.getLastTime());   
     
     update($game);

    
    String  timeSetting=getRoomSetting($room,"dayTime","30000");//1*60*1000   
    Message day=new Message("day","send time",timeSetting);
    String  time=getRoomSetting($room,"lastwordTime","15000");//1*60*1000
    day.setScheduledTime(Long.valueOf(time));   
     insert(day);    
     LogUtil.log(" lastword come over =============");   
end










rule 'not kill, day come'
ruleflow-group "game phase status"

when
	//no kill	
    $message:Message(predict=="time",subject=="day")   
    $game:Game(status=="night")  
    not Die(type=="kill") 
    $room:Room(status=="run")
    
then     
        
       LogUtil.log("no kill day come start =============");   

     $game.setStatus("day");
      $game.setLastTime(System.currentTimeMillis());
       LogUtil.log("no kill day come start last time ============= "+$game.getLastTime());   
     update($game);

       String  timeSetting=getRoomSetting($room,"nightTime","30000");//1*60*1000   
    Message night=new Message("night","send time",timeSetting); 
    String  time=getRoomSetting($room,"dayTime","15000");//1*60*1000
    night.setScheduledTime(Long.valueOf(time));    
    insert(night); 
     LogUtil.log("no kill day come start =============");   
end








rule ' no user lastword, time end ,day come '
ruleflow-group "game phase status"

when
	
   
    //kill
    $message:Message(predict=="time",subject=="day")   
    $game:Game(status=="lastword")   
    $room:Room(status=="run")
       
then     
     LogUtil.log("kill, day come start  =============");   
     $game.setStatus("day");
     $game.setLastTime(System.currentTimeMillis());
     LogUtil.log("kill, day come start============= "+$game.getLastTime());  
     update($game);   
     
    String  timeSetting=getRoomSetting($room,"nightTime","30000");//1*60*1000   
    Message night=new Message(timeSetting,"send time",timeSetting);
    String  time=getRoomSetting($room,"dayTime","15000");//1*60*1000
    night.setScheduledTime(Long.valueOf(time));
  
    insert(night);
     LogUtil.log("kill, day come over =============");    
end

rule '  user lastword over, ,day come '
ruleflow-group "game phase status"

when
	
   
    //kill
    $message:Message(predict=="lastword")   
    $game:Game(status=="lastword")     
   $room:Room(status=="run")
then     
     LogUtil.log("user send lastword, day come start  =============");   
       $game.setStatus("day");
      $game.setLastTime(System.currentTimeMillis());
      LogUtil.log("user send lastword, day come start  "+$game.getLastTime());
     update($game);

    String  timeSetting=getRoomSetting($room,"nightTime","30000");//1*60*1000   
   Message night=new Message("night","send time",timeSetting);
    String  time=getRoomSetting($room,"dayTime","15000");
    night.setScheduledTime(Long.valueOf(time));  
    insert(night);
    
    
    
    String  dayTime=getRoomSetting($room,"dayTime","30000");//1*60*1000
    Message day=new Message("day","time",dayTime); 
    insert(day); 
    
    
    
    
    
    
    
    
    
     LogUtil.log("user send lastword, day come over =============");    
end


rule ' start, day come'
ruleflow-group "game phase status"

when
	
     $message:Message(predict=="start")  
     $game:Game(status=="ready") 
     $room:Room(status=="run")
then     

 LogUtil.log("start, day come start =============");
        

     $game.setStatus("day");
      $game.setLastTime(System.currentTimeMillis());
     LogUtil.log("start, day come start "+$game.getLastTime());
      
     update($game);

    String  timeSetting=getRoomSetting($room,"nightTime","30000");//1*60*1000   
     LogUtil.log("start, day come start ,night come after ============= nightTime "+timeSetting);
    
   Message night=new Message("night","send time",timeSetting);
    String  time=getRoomSetting($room,"dayTime","15000");//1*60*1000
    night.setScheduledTime(Long.valueOf(time));
   
    insert(night); 
    
    String  dayTime=getRoomSetting($room,"dayTime","30000");//1*60*1000
    Message day=new Message("day","time",dayTime);
    LogUtil.log(day);
    insert(day); 
     LogUtil.log("start, day come over ============= will send night message "+night);
end






	





//========================game status group over =========================





//========================right group start =========================
rule 'game start unready right'
ruleflow-group "game right"
no-loop true

when

    $message:Message(predict=="start");   
    $person:Player($id:id,status!="living")
    $right:Right(id==$id)

	
then      
    LogUtil.log("game start unready right   start ============= ");    
	$right.setRight(convertString2Set(""));	
	$right.setIsNotify(false);
    update($right);      
    LogUtil.log("game start unready right  over =============");
end




rule 'day role right'
ruleflow-group "game right"
no-loop true

when

    $message:Message(predict=="time");
   	$game:Game(status=="day")
    $person:Player($id:id,status=="living")
    $right:Right(id==$id)

	
then      
    LogUtil.log("day role right   start ============= "+$message);
    
	$right.setRight(convertString2Set("say,vote"));
	LogUtil.log(" =============");
	$right.setIsNotify(false);
    LogUtil.log(" ============="+$right);
    update($right);
    LogUtil.log(" =============");    
    LogUtil.log("day role right  over =============");
end

rule 'night killer right'
ruleflow-group "game right"
no-loop true
when
	$message:Message(predict=="time")
	$game:Game(status=="night")
    $person:Player($id:id,status=="living")
    $role:Role(id==$id,role=="killer")
    $right:Right(id==$id)

	
then      
    LogUtil.log("night killer right start   =============");    

	$right.setRight(convertString2Set("say,kill"));
	$right.setIsNotify(false);
	//LogUtil.log($right); 
    update($right); 
    LogUtil.log("night killer right  over =============");
end



rule 'night water right'
ruleflow-group "game right"
no-loop true
when
	$message:Message(predict=="time")
	$game:Game(status=="night")
    $person:Player($id:id,status=="living")
    $role:Role(id==$id,role=="water")
    $right:Right(id==$id)

	
then      
    LogUtil.log("night water right start   =============");
	$right.setRight(new HashSet());
	$right.setIsNotify(false);
    update($right); 
    LogUtil.log("night water right  over =============");
end


rule 'die lastword  right'
ruleflow-group "game right"
no-loop true
when
	$message:Message(subject=="lastword",predict=="time")	
	$game:Game()
    $person:Player($id:id,status=="lastword")
    $right:Right(id==$id)
then      
    LogUtil.log("lastworder  right start   =============");     
     $right.setRight(convertString2Set("lastword"));
     $right.setIsNotify(false);   
    update($right);
    
    LogUtil.log("lastworder  right  over =============");
end



rule 'living lastword  right'
ruleflow-group "game right"
no-loop true
when
	$message:Message(subject=="lastword",predict=="time")	
	$game:Game()	
    $person:Player($id:id,status=="living")
    $right:Right(id==$id)
    

then      
    LogUtil.log("lastword other right start   =============");
	$right.setRight(new HashSet());
	$right.setIsNotify(false);
    update($right); 
    LogUtil.log("lastword other right  over =============");
end







rule 'die  right'
ruleflow-group "game right"
no-loop true
when
	$message:Message($id:subject,predict=="die")	
	$game:Game()
	$room:Room(status=="run") 
    $right:Right(id==$id)
then      
    LogUtil.log("die  right  start =============");     
     $right.setRight(convertString2Set("say"));
     $right.setIsNotify(false);   
     update($right);
 
    LogUtil.log("die  right  over =============");
end



rule 'game over right'
ruleflow-group "game right"
no-loop true
when
	
	$message:Message(predict=="over")	
	$room:Room($creater:creater,status=="unrun")
    $person:Player($id:id)
    $right:Right(id==$id)

then      
    LogUtil.log("game over  right start   =============");
    $right.setRight(convertString2Set("say,ready"));
    $right.setIsNotify(false); 		
    update($right);
   
    LogUtil.log("game over  right  over =============");
end









//========================right group over =========================










//========================message group start =========================
rule 'say to all person message when night message'
ruleflow-group "part accepts message"
when
	//conditions	
    $message:Message($subject:subject,predict=="say",object=="-500")   
	 Game(status=="night")
	 Role(id==$subject,$role:role)
	 eval($message.getAccepts().size()==0)
	 
	  $all_group_ids:HashSet()
	      from accumulate(
	      Role($id:id,role==$role)	     
	      init(Set ls=new HashSet();),
	      action(ls.add($id);),
	      result(ls)
	      );
	 
    $operater:Operater()
then      
    LogUtil.log(" say to all person message when night message start  =============");   
    $message.getAccepts().addAll($all_group_ids);
    update($message);
    LogUtil.log("say to all person   message when night message over =============");
  
end





rule 'killer message'
ruleflow-group "part accepts message"
when
	//conditions	
    $message:Message($subject:subject,predict=="kill")   
	 Game(status=="night"||status=="lastword")
	 Role(id==$subject,$role:role)
	 eval($message.getAccepts().size()==0)
	 
	  $all_group_ids:HashSet()
	      from accumulate(
	      Role($id:id,role==$role)	     
	      init(Set ls=new HashSet();),
	      action(ls.add($id);),
	      result(ls)
	      );
	 
    $operater:Operater()
then      
    LogUtil.log(" killer message  start  =============");   
    $message.getAccepts().addAll($all_group_ids);
    update($message);
    LogUtil.log("killer message over =============");
  
end














rule 'say to on person message when night message'
ruleflow-group "part accepts message"
when
	//conditions	
    $message:Message($subject:subject,predict=="say",object!="-500")   
	 Game(status=="night")
	 eval($message.getAccepts().size()==0)
    $operater:Operater()
then      
    LogUtil.log(" say to one person message when night message start  =============");   
    $message.getAccepts().add($message.getObject());
    $message.getAccepts().add($subject);
    update($message);
    LogUtil.log("say to one person message when night message over =============");
  
end



rule 'assign water role message'
ruleflow-group "part accepts message"
when
	//conditions
	$game:Game()	
    $message:Message(subject=="water",predict=="assign")
    eval($message.getAccepts().size()==0)
    $operater:Operater()
then      
    LogUtil.log(" assign water role message start  =============");   
      LogUtil.log($message); 
    $message.getAccepts().add($message.getObject());
    update($message);
    LogUtil.log("assign water role message over =============");
  
end


rule 'assign killer role message'
ruleflow-group "part accepts message"
when
	//conditions
	$game:Game()	
    $message:Message(subject=="killer",predict=="assign")
    eval($message.getAccepts().size()==0)
    $operater:Operater()
    
     $all_group_ids:HashSet()
	      from accumulate(
	      Role($id:id,role=="killer")	     
	      init(Set ls=new HashSet();),
	      action(ls.add($id);),
	      result(ls)
	      );
then      
    LogUtil.log(" assign killer role message start  =============");   
      LogUtil.log($message); 
    $message.getAccepts().addAll($all_group_ids);
    update($message);
    LogUtil.log("assign killer role message over =============");
  
end





rule 'time operater '
ruleflow-group "time of operater"
when
	//conditions	
    $message:Message($subject:subject,predict=="send time")
    $room:Room($rid:id,status=="run")
    $operater:Operater()
then      
    LogUtil.log("time operater  start  =============");   
    
    $message.setPredict("time");
    $message.setWhere($rid);


	$operater.getTimerMessages().add($message);	
	

    retract($message);
    LogUtil.log("time operater over =============,will sent message after "+$message.getTime());
  
end







rule 'game player query'
ruleflow-group "refresh"
when
	//conditions
    $message:Message($subject:subject,predict=="query")
    $room:Room()
    $allLogins:ArrayList()
	      from accumulate(
	      $person:Player()	     
	      init(List ls=new ArrayList();),
	      action(ls.add($person);),
	      result(ls)
	      );
	      
	 $votes:ArrayList()
	      from accumulate(
	      $vote:Vote()	     
	      init(List ls=new ArrayList();),
	      action(ls.add($vote);),
	      result(ls)
	      );
	$game:Game($status:status);  
    $operater:Operater()
    $right:Right(id==$subject)
    $role:Role(id==$subject)
    
    
then      

	 LogUtil.log("get player query info =================");	 
      Map m=new HashMap();
      m.put("room",$room);
      m.put("person",$allLogins);
      m.put("right",$right);
      setRemainTime($status,$game,$room) ; 
      m.put("game",$game);      
      m.put("role",$role); 
       m.put("votes",$votes);  
          
      $operater.setSnapshots(GsonUtil.toJson(m));     
      retract($message);   
	  LogUtil.log("get player query info over =================");
end




rule 'game query test'
ruleflow-group "refresh"
when
 $message:Message($subject:subject,predict=="query")
 then  
  LogUtil.log("game query test =================");
  end

rule 'game unplayer query'
ruleflow-group "refresh"
when
	//conditions
    $message:Message($subject:subject,predict=="query")
   $room:Room()
    $allLogins:ArrayList()
	      from accumulate(
	      $person:Player()	     
	      init(List ls=new ArrayList();),
	      action(ls.add($person);),
	      result(ls)
	      );
	      
	 $votes:ArrayList()
	      from accumulate(
	      $vote:Vote()	     
	      init(List ls=new ArrayList();),
	      action(ls.add($vote);),
	      result(ls)
	      );
	$right:Right(id==$subject)
	$game:Game($status:status);  
    $operater:Operater() 
    not Role(id==$subject)
    
    
then      
	 LogUtil.log("get unplayer query info =================");  
      Map m=new HashMap();
      m.put("room",$room);
      m.put("person",$allLogins);   
      
     setRemainTime($status,$game,$room) ;
      m.put("game",$game);   
       m.put("votes",$votes);  
        m.put("right",$right);    
        

      $operater.setSnapshots(GsonUtil.toJson(m));     
      retract($message);
    	//actions
	LogUtil.log("get unplayer query info over =================");
end








//========================message group over =========================







  