package  drools.common

import drools.common.*
import java.util.*;
import com.gemantic.killer.common.model.Message
import com.gemantic.killer.common.model.Operater;

import  com.gemantic.common.util.json.GsonUtil;

import org.apache.commons.lang.math.RandomUtils;
import org.apache.commons.lang.StringUtils;
import com.gemantic.killer.util.*;



//===========game prepare will process clear info,role assing ,right assign



rule 'clear init '
ruleflow-group "game clear"
when
	//conditions    
    $message:Message($subject:subject,predict=="start")
    not Game()      
   $right:Right()
    //clear source    
    
then      
	//actions
   
     LogUtil.log("game  prepare clear start ================="+$right);   
     retract($right); 
     LogUtil.log("game  prepare clear over =================");
end







rule 'init'
ruleflow-group "game prepare"
no-loop true
when
	//conditions    
    $message:Message($subject:subject,predict=="start",$time:time)
    $room:Room(status=="unrun")  
    not Game()  
    
    //get all players
    $allLoginers:ArrayList()
	      from accumulate(
	       $person:Player($id:id)	     
	      init(List ls=new ArrayList();),
	      action(ls.add($person);),
	      result(ls)
	      ); 
	    //get all readys
    $allReadyIDS:ArrayList()
	      from accumulate(
	      $person:Player(status=="ready",$id:id)	     
	      init(List ls=new ArrayList();),
	      action(ls.add($id);),
	      result(ls)
	      );
     //get operater
     $operater:Operater()
    
    //clear source    
    
then      
	//actions
   
     LogUtil.log("game init process start =================");
     //0 setGameName 
     String	rname=String.valueOf(RandomUtils.nextLong());
     //1.assign role	
	 int  killerCount=Integer.valueOf(getRoomSetting($room,"killerCount","1")); 
	 int  policeCount=Integer.valueOf(getRoomSetting($room,"policeCount","1")); 
	 int  waterCount= $allReadyIDS.size()-killerCount-policeCount;
	 
	 Map role_count=new HashMap();
		role_count.put("killer", killerCount);
	    role_count.put("police", policeCount);
		role_count.put("water", waterCount);

	 //get uid id List	
	 Map	ids_role=RoleUtil.assingRole(role_count,$allReadyIDS);
	 
	 //2. creae game
	Game game=new Game("ready",$allReadyIDS.size(),waterCount,killerCount,policeCount,System.currentTimeMillis(),0L,$time,rname);
	
	 
	 //3.create Role/status/vote record message create log ,how to update all unready players status;
	 
		LogUtil.log("============================ role is "+ids_role);
		for(Object o: $allLoginers){
			      Player p=(Player)o;
			      	LogUtil.log(p);
			    String uid=p.getId();
			    if("ready".equals(p.getStatus())){
			    
			        //ready players
			    
			      String role=(String)ids_role.get(uid);			      
				  modify(p){setStatus("living")};
				  
				  Role r=new Role(uid,role);
				  insert(r);	  
				  
				  
				  
				  Message assignMessage=new Message(role,"assign",uid); 
				  insert(assignMessage);	  
				  
				  Message livingMessage=new Message(uid,"living",""); 
				  insert(livingMessage);
				  
				        
                   Right right= new Right(uid,convertString2Set("say,vote"),false);		
		           insert(right);	
		            
		             
               Message rightMessage=new Message(uid,"right","say,vote"); 
               insert(rightMessage);
		            
		            
		            
		       JobLogger.logMessages(rname,Arrays.asList(new Message[]{new Message(uid,"ready",""),new Message(uid,"login","")}));			
			    
			    
			    }else{
			       //no ready right 
			    
			       Right right= new Right(uid,convertString2Set(""),false);		
		           insert(right);	
		            
		             
                   Message rightMessage=new Message(uid,"right",""); 
                   insert(rightMessage);
		        
			    }
			
		}

	
	
	LogUtil.log(" game status  ================="+game);
	//4 update room status ||repeat with game			
	modify($room){setStatus("run")};
	
	
	//5.create time message	
	Message nightDelay=createDelayNight($room);
    insert(nightDelay); 
     Message day=createDay($room);
     insert(day); 
     
	
	//6.update game phase	
	 game.setStatus("day");
     game.setLastTime(System.currentTimeMillis());
     LogUtil.log("start, day come start "+game.getLastTime());      
    insert(game);

    
	
	LogUtil.log("game init process over  =================");	
	//7. update operater 
	$operater.setGameStart(true);
	$operater.setPlayers($allReadyIDS);
        
   
end
//===========game prepare will process clear info,role assing ,right assign============over 

//========================query group start =========================


  

