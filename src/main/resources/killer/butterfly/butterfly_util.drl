package drools.common

import drools.common.*
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.Map;
import java.util.Collections;



import org.apache.commons.lang.StringUtils;




function void setRemainTime(String status,Game game,Room room) {

     if("day"==status){
       status="dayTime";
     };
     
     if("night"==status){
       status="nightTime";
     };
     
     if("lastword"==status){
       status="lastwordTime";
     };
     
    
     Long setting=Long.valueOf(getRoomSetting(room,status,"-1"));
      Long lastTime=game.getLastTime();
      Long time=lastTime+setting-System.currentTimeMillis();
      if(time < 0){
            LogUtil.log("=========== error ======= "+time);          
      }else{
          game.setRemainTime(time);
      }
     
       
}



function List<String>  getIDFromPlayer(List players) {

      List<String> pids=new ArrayList();
	    for(Object o:players){
	          Player p=(Player)o;			 
			  pids.add(p.getId());
		}
		return pids;
}


function Message createDelayNight(Room room) {

    String  time=getRoomSetting(room,"nightTime","30000");//1*60*1000 
    Message night=new Message("night","switch",time);
    String  schedule=getRoomSetting(room,"dayTime","15000");//1*60*1000
    night.setScheduledTime(Long.valueOf(schedule));
    night.setWhere(room.getId());
    return night;
  
}

function Message createDelayDayOfLastword(Room room) {

    String  time=getRoomSetting(room,"dayTime","30000");//1*60*1000 
    Message night=new Message("day","switch",time);
    String  schedule=getRoomSetting(room,"lastwordTime","15000");//1*60*1000
    night.setScheduledTime(Long.valueOf(schedule));
    night.setWhere(room.getId());
    return night;
  
}
function Message createDelayDayOfNight(Room room) {

    String  time=getRoomSetting(room,"dayTime","30000");//1*60*1000 
    Message night=new Message("day","switch",time);
    String  schedule=getRoomSetting(room,"nightTime","15000");//1*60*1000
    night.setScheduledTime(Long.valueOf(schedule));    
     night.setWhere(room.getId());
    
    return night;
  
}

function Message createDay(Room room) {
    String  dayTime=getRoomSetting(room,"dayTime","30000");//1*60*1000
    Message day=new Message("day","time",dayTime);
 
     return day;
   
  
}


    
    function Message createNight(Room room) {
    String  dayTime=getRoomSetting(room,"nightTime","30000");//1*60*1000
    Message day=new Message("night","time",dayTime);
 
     return day;
   
  
}
    
    function Message createLastword(Room room) {
    String  dayTime=getRoomSetting(room,"lastwordTime","30000");//1*60*1000
    Message day=new Message("lastword","time",dayTime);
 
     return day;
   
  
}
    
   

   
function List getVoteStatus(String status,String personStatus,String role,List vss){

     List ls=new ArrayList();
 
       
      for(Object o:vss){
         VoteStatus vs=(VoteStatus)o;
          List l=new ArrayList();
      
        if("day".equals(status)){   
            l=vs.getVoters();      
        
        };
        
         if(("night".equals(status))&&("living".equals(personStatus))){          
             
                
                  if("water".equals(role)){
                       l=vs.getVoters();
                   };
                   
                   if("killer".equals(role)){
                      l=vs.getKillerVoters();
                   };
                     if("police".equals(role)){
                      l=vs.getPoliceVoters();
                   };
                   
      
                 
         };
         
         
        VoteCommonStatus vcs=new VoteCommonStatus(vs.getId(),l);
        ls.add(vcs);
      
      
      }
      return ls;
        
     
}


   function List getUnplayerVoteStatus(String status,List vss){

    List ls=new ArrayList();
     for(Object o:vss){
         VoteStatus vs=(VoteStatus)o;
         List l=new ArrayList();
      
        if("day".equals(status)){   
            l=vs.getVoters(); 
        }
         
        VoteCommonStatus vcs=new VoteCommonStatus(vs.getId(),l);
         ls.add(vcs);
      
       
      }
    
 
    
    return ls;
        
     
}

function int getPoliceCount(Map map, int totalCount) {
		// TODO Auto-generated method stub
		String isAutoSet = (String) map.get("autoSetting");
		String ghostCount = (String) map.get("policeCount");
		
		int part = 4;
		if(totalCount<8){
		  totalCount=8;
		}
		
		if ("true".equals(isAutoSet)) {
			return (totalCount - 1) / part ;
		} else {
			int count=Integer.valueOf(ghostCount);
			return count;
		}

}


function int getKillerCount(Map map, int totalCount) {
		// TODO Auto-generated method stub
		String isAutoSet = (String) map.get("autoSetting");
		String ghostCount = (String) map.get("killerCount");
		
		int part = 4;
		if(totalCount<8){
		  totalCount=8;
		}
		
		if ("true".equals(isAutoSet)) {
			return (totalCount - 1) / part ;
		} else {
			int count=Integer.valueOf(ghostCount);
			return count;
		}

}











