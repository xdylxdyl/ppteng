package drools.common

import drools.common.*


import com.gemantic.killer.common.model.Message
import com.gemantic.killer.common.model.Operater;
import com.gemantic.killer.common.model.Setting;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

import java.util.HashMap;
import java.util.Map;
import java.util.Iterator;
import com.gemantic.common.drools.util.LogUtil;
import  com.gemantic.common.util.json.GsonUtil;




//========================action group start =========================


rule 'create room'
ruleflow-group "action"
when
	//conditions

    $message:Message(predict=="create")
    $operater:Operater($setting:setting)
    
then      
	
	 LogUtil.log("create rooom =================");	
	 
	  Map set=new HashMap();	
	  if($setting==null){
	  
	  }else{
	  
	      set=$setting.getSetting();
	      
	      
	  }	 	 
	 Room room=new Room($message.getSubject(),$message.getContent(),$message.getWhere().toString(),set,$message.getVersion(),"unrun") ;
	
     insert(room);  
 
     Message loginMessage=new Message($message.getSubject(),"login",""); 
     insert(loginMessage);
  LogUtil.log("create rooom ================="+room);	
    LogUtil.log("create rooom over =================");

    
end


rule 'update room setting'
ruleflow-group "action"
no-loop true
when
	//conditions

    $message:Message(predict=="setting")
    $operater:Operater($setting:setting)
    $room:Room()
    
then      
	
	 LogUtil.log("update room setting start =================");
	 
	 

       
       
	  $room.setSetting($setting.getSetting());
	 LogUtil.log($setting.getSetting());
     update($room);  
     
    LogUtil.log("update room setting over =================");

    
end






rule 'admin kick right'
ruleflow-group "action"
when
	
    
	$room:Room($creater:creater,status=="unrun")   
    $right:Right(id==$creater,right not contains "kick")

then      
   //why not run 
    LogUtil.log("admin right start   =============");
    
   

    $right.getRight().add("kick");    
    update($right);
    //Message right=new Message($creater,"right",$person.getRight().toString().replace("[", "").replace("]", "")); 
   
   // insert(right);
    LogUtil.log("admin right  over =============");
end



rule 'admin start right'
ruleflow-group "action"
when
	
    
	$room:Room($creater:creater,status=="unrun")
    $person:Player(id==$creater,status=="ready")
     $right:Right(id==$creater,right not contains "start")
   

then      
   //why not run 
    LogUtil.log("admin right start   =============");
    $right.getRight().add("start"); 
    $right.setIsNotify(false);
    //Message right=new Message($creater,"right",$person.getRight().toString().replace("[", "").replace("]", "")); 
    update($right);
    //insert(right);
    LogUtil.log("admin right  over =============");
end


rule 'change admin'
ruleflow-group "change admin"
when
	//conditions
	    $room:Room($creater:creater,$rid:id)
    not Player(id==$creater)
     $person:Player($pid:id)
then      
	
	 LogUtil.log("change admin =================");
	$room.setCreater($pid);
	update($room);
	
	  Message admin=new Message($pid,"admin",$rid); 
     insert(admin);
     
     
     LogUtil.log("change admin over =================");

    
end














rule 'login'
ruleflow-group "login action"
when
	//conditions
    $room:Room()
    $message:Message($subject:subject,predict=="login")
    not Player(id==$subject)
then      
	//actions
     LogUtil.log("login =================");  
    Player person=new Player($message.getSubject(),"","unready");
    insert(person);
    LogUtil.log(person); 
    
     LogUtil.log("login over ================= "); 
      
    
end




rule 'login init right when unrun'
ruleflow-group "login action"
no-loop true
when
	//conditions
    
    $person:Player($id:id)
    not right:Right(id==$id)
    $room:Room(status!="run")
then      
	//actions
     LogUtil.log("login init right ================="); 
     Right r=new Right($id,convertString2Set("say,ready"),false);
     insert(r);
         
    //  LogUtil.log(person); 
 // LogUtil.log($room); 
     LogUtil.log("login init right over ================= "); 
      
    
end


rule 'login init right when run'
ruleflow-group "login action"
no-loop true
when
	//conditions
    
    $person:Player($id:id)
    not right:Right(id==$id)
    $room:Room(status=="run")
then      
	//actions
     LogUtil.log("login init right ================="); 
     Right r=new Right($id,convertString2Set("say"),false);
     insert(r);
         
    //  LogUtil.log(person); 
 // LogUtil.log($room); 
     LogUtil.log("login init right over ================= "); 
      
    
end







rule 'logout clear person'
ruleflow-group "logout action"
when
	//conditions    
    $message:Message($subject:subject,predict=="logout")
    $person:Player(id==$subject)
    $room:Room()   
then      
	//actions
     LogUtil.log("logout clear person ================= "+$person); 
     retract($person); 
     LogUtil.log("logout  clear person over ================="); 
     
end



rule 'logout clear room'
ruleflow-group "logout action"
when
	//conditions
    
    $message:Message($subject:subject,predict=="logout")     
    $operater:Operater(roomEmpty==false) 
    not Player()
then      
	//actions
     LogUtil.log("logout clear person ================= "); 
     $operater.setRoomEmpty(true);
     update($operater);     
     LogUtil.log("logout  clear person over ================="); 
     
end

rule 'kick clear room'
ruleflow-group "logout action"
when
	//conditions
    
    $message:Message($subject:subject,predict=="kick")     
    $operater:Operater(roomEmpty==false) 
    not Player()
then      
	//actions
     LogUtil.log("logout clear person ================= "); 
     $operater.setRoomEmpty(true);
     update($operater);     
     LogUtil.log("logout  clear person over ================="); 
     
end



rule 'logout clear right'
ruleflow-group "logout action"
when
	//conditions
    
    $right:Right($id:id)
    not Player(id==$id)
    
then      
	//actions
     LogUtil.log("logout clear right start ================= "); 
   
    
     retract($right);
     LogUtil.log("logout clear right over ================="); 
    
end








rule 'ready'
ruleflow-group "action"
no-loop true
when	
    $room:Room($creater:creater,status!="run")
    $message:Message($subject:subject,predict=="ready")
    $person:Player(id==$subject,status!="ready")
    $right:Right(id==$subject,right contains "ready")
then      
	//actions
     LogUtil.log("ready ================= "+$person+" room is "+$room); 
       
     $right.getRight().remove("ready");

     if($subject.equals($creater)){
     
     }else{
      $right.setIsNotify(false);
     }
    
     $person.setStatus("ready");     
     update($right);
     update($person);
     LogUtil.log("ready over =================");
end


rule 'kick'
ruleflow-group "action"
when
	//conditions
    
    $message:Message($object:object,predict=="kick")
    $person:Player(id==$object)
then      
	//actions
    LogUtil.log("kick ================= "+$person); 

   
     retract($person);
     LogUtil.log("kick over =================");
end






//========================action group over  =========================



//========================query group start =========================




rule 'login repeat'
ruleflow-group "query"
when
	//conditions
    $room:Room()
    $message:Message($subject:subject,predict=="login")
    Player(id==$subject)
then      
	//actions
     LogUtil.log("login repeat ================="); 
    retract($message);
    //  LogUtil.log(person); 
 // LogUtil.log($room); 
     LogUtil.log("login repeat over ================= "); 
      
    
end






//========================query group over =========================





//======================== game over   =========================



rule 'game over '
ruleflow-group "generate message"

when
	//conditions	
    $message:Message(predict=="over")
    $operater:Operater(gameOver==false)   
    
    
 then      
    LogUtil.log("game over start  =============");
	$operater.setGameOver(true);
	
    LogUtil.log("game over over =============");
end












//========================message group  start=========================



rule 'right message'
ruleflow-group "generate message"

when

   $right:Right($id:id,isNotify==false)
then      
    LogUtil.log("generate right message  start =============");
   
   Message right=new Message($id,"right",$right.getRight().toString().replace("[", "").replace("]", "")); 
    insert(right);
    
    $right.setIsNotify(true);
    update($right);
	
   LogUtil.log("generate right message  over =============");
end




rule 'say to one person message'
ruleflow-group "part accepts message"

when
	//conditions	
    $message:Message($subject:subject,predict=="say",object!="-500")   
	$room:Room(status=="unrun")
	 eval($message.getAccepts().size()==0)
    $operater:Operater()
then      
    LogUtil.log(" say to one person message start  =============");   
   $message.getAccepts().add($message.getObject()); 
    update($message);
    LogUtil.log("generate message over =============");
  
end

rule 'admin kick message'
ruleflow-group "part accepts message"

when
	//conditions	
    $message:Message($subject:subject,predict=="kick",$object:object)   
	
	 eval($message.getAccepts().size()==0)
    $operater:Operater()
then      
    LogUtil.log(" admin kick message start  =============");   
    $message.getAccepts().add($subject);
    $message.getAccepts().add($object);
     update($message);
    LogUtil.log("admin kick messagessage over =============");  
end


rule 'right  message'
ruleflow-group "part accepts message"

when
	//conditions	
    $message:Message($subject:subject,predict=="right",$object:object)   
    eval($message.getAccepts().size()==0)

    $operater:Operater()
then      
    LogUtil.log(" right  message  accepts start  =============");     
    $message.getAccepts().add($subject);
     update($message);
     //LogUtil.log($message.getAccepts()); 
    LogUtil.log("right  message accepts over =============");  
end






rule 'ready test all accepts message'
ruleflow-group "all accepts message"
no-loop true
when

then      
	//actions
     LogUtil.log("ready test  all accepts message================= "); 
    
     LogUtil.log("ready test all accepts message over =================");
end



rule 'all accepts message'
ruleflow-group "all accepts message"

when
	//conditions	
    $message:Message($subject:subject,$object:object,$accepts:accepts)    
    eval($message.getAccepts().size()==0)
   $all_login_ids:HashSet()
	      from accumulate(
	      Player($id:id)	     
	      init(Set ls=new HashSet();),
	      action(ls.add($id);),
	      result(ls)
	      );
    
then      
   // LogUtil.log("all message   start ?=============");
   // LogUtil.log($message);
    
     //LogUtil.log($accepts.size());
   $accepts.addAll(new ArrayList($all_login_ids));	
  // LogUtil.log("all message over =============");
end





rule 'next operater '
ruleflow-group "next of operater"

when
	//conditions	
    $message:Message()
    $room:Room($rid:id)
    $operater:Operater()
then      
    //LogUtil.log("next operater  start  =============222");   
     $message.setWhere($rid);
     $message.setTime(System.currentTimeMillis());
  
     $operater.getNextMessages().add($message);	
   
	 retract($message);
	
    //LogUtil.log("next operater over =============");
  
end









rule 'query rule'
ruleflow-group "snapshot"

when
	//conditions
     Message($subject:subject,predict=="query")
    $room:Room()
    $allLogins:ArrayList()
	      from accumulate(
	      $person:Player()	     
	      init(List ls=new ArrayList();),
	      action(ls.add($person);),
	      result(ls)
	      );	
    $operater:Operater()
    $right:Right(id==$subject)
   
then      
	
	 LogUtil.log("room get query info ================= ");	  
      Map m=new HashMap();
      m.put("room",$room);
      m.put("person",$allLogins);  
      m.put("right",$right); 

      $operater.setSnapshots(GsonUtil.toJson(m));
    	//actions
	LogUtil.log("room get query info over =================");
end








