package drools.common

import drools.common.*
import com.gemantic.killer.common.model.Message
import com.gemantic.killer.common.model.Operater;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import com.gemantic.common.util.json.GsonUtil;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.lang.math.RandomUtils;
import org.apache.commons.lang.StringUtils;
import com.gemantic.killer.util.*;
import com.gemantic.common.drools.util.LogUtil;










//========================query group start =========================














rule 'bomb assign'
ruleflow-group "game init"
when
	
    $message:Message(predict=="start",$time:time)
    
    
    $allReadys:ArrayList()
	      from accumulate(
	      $person:Player(status=="ready")	     
	      init(List ls=new ArrayList();),
	      action(ls.add($person);),
	      result(ls)
	      );
    
    $room:Room(status=="unrun")    
     $operater:Operater()
then      
	//LogUtil.log("bomb assign  =================");
	//LogUtil.log($allReadys);
	 int  rowCount=Integer.valueOf(getRoomSetting($room,"rowCount","9"));//1*60*1000  
	 int  columnCount=Integer.valueOf(getRoomSetting($room,"columnCount","9"));//1*60*1000  
	 int  bombCount=Integer.valueOf(getRoomSetting($room,"mineCount","10"));//1*60*1000  

     String systemBombPic=BombUtil.assign(rowCount,columnCount,bombCount);
     //LogUtil.log(" systemBombPic ================= "+systemBombPic);
     BombPic bombPic=new BombPic(systemBombPic,"");
     insert(bombPic);
     
    String	rname=String.valueOf(RandomUtils.nextLong());
    
     List readyIDS=new ArrayList();
     
     

     
     //init user bomb count
     
     for(Object o: $allReadys){
     
        Player p=(Player)o;
      
          String uid=p.getId();
		readyIDS.add(Long.valueOf(uid));
				  
				  UserCount uc=new UserCount(uid,0,0);
				  insert(uc);	  
				  Message assignMessage=new Message(uid,"count","0");
				  insert(assignMessage);	
				  
	    p.setStatus("living");	  
		 update(p);  
		 
		
		 JobLogger.logMessages(rname,Arrays.asList(new Message[]{new Message(uid,"ready",""),new Message(uid,"login","")}));	
     
     }
     
	

	
	
	Game game=new Game("run",System.currentTimeMillis(),0L,$time,rname, $allReadys.size(),$time);
	insert(game);
	
	//LogUtil.log(" game status  ================="+game);
	
	Count count=new Count(0,bombCount,rowCount*columnCount,0,0);
	insert(count);
	
	$room.setStatus("run");	
	update($room);
	$operater.setGameStart(true);
	$operater.setPlayers(readyIDS);
	Message initMessage=new Message("","init",systemBombPic);
	insert(initMessage); 
	
	//LogUtil.log("role assign process over  =================");
end



rule 'clear tag'
ruleflow-group "game init"
when
	
    $message:Message(predict=="start",$time:time)   
    $room:Room(status=="unrun")    
    $operater:Operater()
    $tag:Tag()   
then      

	//LogUtil.log("clear tag start  =================");	
    retract($tag);

	//LogUtil.log("clear tag over  =================");
end


rule 'clear click'
ruleflow-group "game init"
when
	
    $message:Message(predict=="start",$time:time)   
    $room:Room(status=="unrun")    
    $operater:Operater()
    $click:Click()   
then      

	//LogUtil.log("clear click start  =================");	
    retract($click);

	//LogUtil.log("clear click over  =================");
end


rule 'start game right'
ruleflow-group "game right"
no-loop true
when

    $message:Message(predict=="start");
    $person:Player($id:id)
    $right:Right(id==$id)
    Game()
    

	
then      
    //LogUtil.log("start game right   start ============= "+$message);
    
	$right.setRight(convertString2Set("say"));
	LogUtil.log(" =============");
	$right.setIsNotify(false);
    LogUtil.log(" ============="+$right);
    update($right);
    //LogUtil.log(" =============");    
    //LogUtil.log("start game right  over =============");
end



rule 'game over right'
ruleflow-group "game right"
no-loop true
when
	
	$message:Message(predict=="over")	
	$room:Room($creater:creater,status=="unrun")
    $person:Player($id:id)
    $right:Right(id==$id)

then      
  //  LogUtil.log("game over  right start   =============");
    $right.setRight(convertString2Set("say,ready"));
    $right.setIsNotify(false); 		
    update($right);
   
   // LogUtil.log("game over  right  over =============");
end









//========================action group start =========================

rule 'click pane'
ruleflow-group "user action"
no-loop true
when
    
    $message:Message($subject:subject,$object:object,predict=="click")
    $player:Player(id==$subject,status=="living")   
    $bombPic:BombPic($system:system,$user:user)    
    $room:Room()
    not Tag(pid==$object) 
   
then
    //LogUtil.log("click pane start  ================="); 
    
     Pair p=BombUtil.convertString2Pair($object);   
     
     int  rowCount=Integer.valueOf(getRoomSetting($room,"rowCount","9"));//1*60*1000  
     
	 int  columnCount=Integer.valueOf(getRoomSetting($room,"columnCount","9"));//1*60*1000  	 
	 
	 
    String userTag=BombUtil.clickOpen(p,$system,rowCount,columnCount);     
   
    
    //  LogUtil.log("=========");
    Click click=new Click($subject,userTag,$object);
    
    insert(click);     
   // Tag tag=new Tag($subject,pane,BombUtil.convertPair2String(pane.getCoordinate()));
    //  LogUtil.log("=========");
  //  insert(tag);   
    
 
    
  //  LogUtil.log("click pane over  ================="); 
end


//tag Pane 
rule 'tag pane'
ruleflow-group "user action"
no-loop true
when
     $room:Room()
    $message:Message($subject:subject,$object:object,predict=="tag")
    $player:Player(id==$subject,status=="living")  
    $bombPic:BombPic($system:system,$user:user)    
    not Tag(pid==$object)
    $count:Count($bomb:bomb,$right:right)
    
then
  //  LogUtil.log("tag pane start  ================="); 
     Pair p=BombUtil.convertString2Pair($object);
     
      int  rowCount=Integer.valueOf(getRoomSetting($room,"rowCount","9"));//1*60*1000  
      LogUtil.log("=========");
	 int  columnCount=Integer.valueOf(getRoomSetting($room,"columnCount","9"));//1*60*1000  
    String userTag=BombUtil.clickOpen(p,$system,rowCount,columnCount);    
    
    if("*".equals(userTag)){
    $right=$right+1;    
    }
    Message tagMessage=new Message($object,"mine","#");
    tagMessage.setContent($subject);
    insert(tagMessage);     
    $bomb=$bomb+1;    
    $count.setBomb($bomb);
    $count.setRight($right);
    update($count);
   // LogUtil.log("count is   ================="+$count);
    
   
    
    
    Tag tag=new Tag($subject,"#",$object);
    insert(tag);
    retract($message);
    
  //  LogUtil.log("tag pane over  ================="); 
end

//tag Pane
rule 'clear tag pane'
ruleflow-group "clear tag action"
no-loop true
when
     $room:Room()
    $bombPic:BombPic($system:system,$user:user)    
    $message:Message($subject:subject,predict=="tag",$object:object)  
    $player:Player(id==$subject,status=="living")  
    $count:Count($bomb:bomb,$right:right)
    $tag:Tag(pid==$object,value=="#")
   
       
then
    
    Pair p=BombUtil.convertString2Pair($object);
     int  rowCount=Integer.valueOf(getRoomSetting($room,"rowCount","9"));//1*60*1000      
	 int  columnCount=Integer.valueOf(getRoomSetting($room,"columnCount","9"));//1*60*1000  
    String userTag=BombUtil.clickOpen(p,$system,rowCount,columnCount);   
    if("*".equals(userTag)){
      $right=$right-1;
    } 
    
    $count.setRight($right);
    $bomb=$bomb-1;
    
    $count.setBomb($bomb);
    update($count);
    
     
    
    
    
    retract($tag);
    retract($message);
    Message m=new Message($object,"mine","clear");
     m.setContent($subject);
    insert(m);
    

end







rule 'double click pane'
ruleflow-group "user action"

when
    $message:Message($subject:subject,predict=="double click",$object:object)
    $player:Player(id==$subject,status=="living")  
    $bombPic:BombPic($system:system,$user:user) 
    $room:Room()
   
then
   // LogUtil.log("double click pane start  ================= "+$object+" system "+ $system);
 
        Pair pair=BombUtil.convertString2Pair($object);
     int  rowCount=Integer.valueOf(getRoomSetting($room,"rowCount","9"));//1*60*1000  
     // LogUtil.log("=========");
	 int  columnCount=Integer.valueOf(getRoomSetting($room,"columnCount","9"));//1*60*1000  
	  LogUtil.log("=========");
    List<Pair> roundPanes=BombUtil.getRoundPanes(pair,rowCount,columnCount);
     LogUtil.log("=========");
      LogUtil.log("roundPanes  ================= "+roundPanes);
    boolean doubleClick=true;
    for(Pair p:roundPanes){
       //LogUtil.log(p);
       String tag=BombUtil.clickOpen(p,$system,rowCount,columnCount);     
       Pane pane=new Pane(BombUtil.convertPair2String(p),p,tag,"" ); 
    
       Click click=new Click($subject,tag,BombUtil.convertPair2String(pane.getCoordinate()));
       insert(click);  
      
    } 
   
    
    
   // LogUtil.log("double click pane over  ================="); 
end






rule 'click number'
ruleflow-group "click action"

when
    $click:Click($pid:pid,value != "0" && value != "*",$uid:uid)    
    not Tag(pid==$pid)   
    $bombPic:BombPic()    
    $game:Game() 
     $room:Room()
      $count:Count($user:user) 
      $userCount:UserCount($uc:count,uid==$uid)
then
   // LogUtil.log("click number  start  =================");   
   
   //  Long start=System.currentTimeMillis();
    
     Message tagMessage=new Message($pid,"mine",$click.getValue()); 
      tagMessage.setContent($uid);
     insert(tagMessage);       
  
    Tag tag=new Tag($click.getUid(),$click.getValue(),$pid);
     insert(tag);
    
    retract($click); 
    
     $count.setUser($user+1);
     update($count);
   $uc=$uc+1; 
    $userCount.setCount($uc);
    update($userCount);
  

end



rule 'click zero number'
ruleflow-group "click action"
when
    $click:Click($pid:pid,value == "0",$uid:uid)  
    $bombPic:BombPic($system:system,$user:user)
    not Message(subject==$pid,predict=="mine")
    not Tag(pid==$pid)
    $game:Game()    
    $room:Room()
    $count:Count($userCount:user)
    $uCount:UserCount($uc:count,uid==$uid)
     
then
    //LogUtil.log("click  zero number  start  ================= "+$click);   
   // Long start=System.currentTimeMillis();
     int  rowCount=Integer.valueOf(getRoomSetting($room,"rowCount","9"));//1*60*1000  
     // LogUtil.log("=========");
	 int  columnCount=Integer.valueOf(getRoomSetting($room,"columnCount","9"));//1*60*1000  
	 Pair pair=BombUtil.convertString2Pair($pid);
    List<Pair> roundPanes=BombUtil.getRoundPanes(pair,rowCount,columnCount);
    //  LogUtil.log(pair+" list pair is   ================= "+roundPanes);  
    for(Pair p:roundPanes){
    
       String value=BombUtil.clickOpen(p,$system,rowCount,columnCount); 
       
       Click click=new Click($click.getUid(),value,BombUtil.convertPair2String(p));
       insert(click);
    }    
       
     Message tagMessage=new Message($pid,"mine",$click.getValue()); 
      tagMessage.setContent($uid);
     insert(tagMessage); 
     
       Tag tag=new Tag($click.getUid(),$click.getValue(),$pid);
     insert(tag);
      retract($click);
      
        $count.setUser($userCount+1);
       //  LogUtil.log(" count is  ================="+$count); 
     update($count);
       $uc=$uc+1; 
    $uCount.setCount($uc);
    update($uCount);

    //LogUtil.log("click zero number use time   ================="+(System.currentTimeMillis()-start)); 
end



rule 'user count'
ruleflow-group "count action"
no-loop true
when
    
    $message:Message($subject:subject,$object:object,predict=="click")  
    $userCount:UserCount($uc:count,uid==$subject,$clickCount:clickCount)
then

    Message ucMessage=new Message($subject,"count",String.valueOf($uc));
    insert(ucMessage);
      modify($userCount){setClickCount($clickCount+1)};    
  
    //LogUtil.log("count actionr  start  ================= "+$userCount); 
    retract($message);
end


rule 'merge message'
ruleflow-group "merge message"
no-loop true
when    
    $game:Game()    
    $room:Room() 
    $msgs:ArrayList()
	      from accumulate(
	      $msg:Message(predict=="mine")	     
	      init(List ls=new ArrayList();),
	      action(ls.add($msg);),
	      result(ls)
	      );
	      
	 eval($msgs.size()>1)
     
then
    //LogUtil.log("click  zero number  start  ================= "+$click);   
     Long start=System.currentTimeMillis();
  StringBuffer sb=new StringBuffer();
		
	
    for(Object o: $msgs){
    
     Message msg=(Message)o;
       
        sb=sb.append(msg.getSubject());
		sb=sb.append(BombUtil.Split_Underline);
		sb=sb.append(msg.getObject());
        sb=sb.append(",");
        retract(msg);
        
    }    
       
     Message mergeMessage=new Message("","mergeMine",sb.toString());      
     insert(mergeMessage);      
   //  LogUtil.log("merge message use time   ================="+(System.currentTimeMillis()-start)); 
    //LogUtil.log("click zero number use time   ================="+(System.currentTimeMillis()-start)); 
end






rule 'click mine'
ruleflow-group "game status"

when
    $click:Click(value=="*",$pid:pid,$uid:uid)
   
     
    $bombPic:BombPic($system:system,$user:user)    
    $game:Game($recordName:recordName)
  
   
    
    $money:Double()
	      from accumulate(
	      UserCount($c:count),
	      sum($c)	     
	      )    
    
then
   // LogUtil.log("click mine start  ================="); 
  
     retract($click);
               
     Message tagMessage=new Message($pid,"mine","bomb"); 
     insert(tagMessage); 
     
      Message wrongMessage=new Message($uid,"wrong",$pid); 
      wrongMessage.setContent(String.valueOf($money));
      
     insert(wrongMessage); 
     
     Message gameOverMessage=new Message($recordName,"over","you lose");
     gameOverMessage.setContent(String.valueOf(System.currentTimeMillis()-$game.getStartAt())); 
     insert(gameOverMessage); 
      
     $game.setStatus("over");
     update($game);
    
   
   // LogUtil.log("click mine over  ================="); 
end










rule 'taged click zero number'
ruleflow-group "clear click"
when
    $click:Click($pid:pid) 
    $game:Game()    
    $room:Room()
then
    //LogUtil.log("taged click  zero number  start  ================= "+$click);   
     
      retract($click);
   // LogUtil.log("taged click zero number over  ================="); 
end







rule 'complete'
ruleflow-group "game status"

when
    $bombPic:BombPic()
    $game:Game($recordName:recordName)    
    $count:Count($all:all,$right:right,$user:user,$bomb:bomb,$init:init)    
    eval($right==$all||$user==$init-$all)
    
    
then
   // LogUtil.log("click mine start  ================="); 

     Message gameOverMessage=new Message($recordName,"over","win"); 
     gameOverMessage.setContent(String.valueOf(System.currentTimeMillis()-$game.getStartAt()));
     insert(gameOverMessage); 
   
     
     $game.setStatus("over");
     update($game);
     
     
   
   // LogUtil.log("click mine over  ================="); 
end







rule 'player logout  process count'
ruleflow-group "person count"
no-loop true
when
 $game:Game($playerCount:playerCount);
 $message:Message($subject:subject,predict=="logout")
 $person:Player(id==$subject,status=="living")
 

then  
   //  LogUtil.log(" logout game live count start  ================="); 
      
     
    $game.setPlayerCount($playerCount-1);   
     update($game);
  //   LogUtil.log(" logout game live count over  ================="+$game); 
end


rule 'no player game over'
ruleflow-group "game status"
no-loop true
when
 $game:Game(playerCount<=0,status=="run",$recordName:recordName);
  $operater:Operater()  
  
 
then  
   //  LogUtil.log("no player game over start  ================="); 
      
     Message gameOverMessage=new Message($recordName,"over","lose"); 
     gameOverMessage.setContent(String.valueOf(System.currentTimeMillis()-$game.getStartAt()));
     insert(gameOverMessage); 
           
     $game.setStatus("over");
     $game.setOverAt(System.currentTimeMillis());
     update($game);   
    // LogUtil.log("no player game over over  ================="); 
end




rule 'game over process'
ruleflow-group "game status"

when
    
    $game:Game($recordName:recordName,status=="over")    
    $operater:Operater()  
    $count:Count()   
    $bombPic:BombPic($system:system,$user:user)
    $room:Room() 
    
       
    $allUserCount:ArrayList()
	      from accumulate(
	      $userCount:UserCount()	     
	      init(List ls=new ArrayList();),
	      action(ls.add($userCount);),
	      result(ls)
	      );
    
    
   
    
then
   // LogUtil.log("game over processstart  ================="); 
    
   
     retract($count);
     retract($bombPic);   
     Map m=new HashMap();
     for(Object o:$allUserCount){
         UserCount uc=(UserCount)o;
         Message clickCountMessage=new Message(uc.getUid(),"clickCount",String.valueOf(uc.getClickCount())); 
         insert(clickCountMessage);
         retract(o);
         m.put(Long.valueOf(uc.getUid()),uc.getCount());
     }
    
     $room.setStatus("unrun"); 
     update($room);
     
     $operater.setGameOver(true);
     $operater.setRecordID(Long.valueOf($recordName));
     $operater.setMoney(m);  
     
     
   
  //  LogUtil.log("game over process over  ================="); 
end



rule 'game over status '

ruleflow-group "game status"
when
     Game(status=="over") 
     $person:Player(status!="unready");
     
then 
    // LogUtil.log("game over status start  ================="); 
    $person.setStatus("unready");   
    update($person);   
    
  
   // LogUtil.log("game over status over  ================="); 
end








//========================game status group over =========================

//========================retract game start =========================
rule 'retract game'
ruleflow-group "retract game"
when
	//conditions
	$room:Room(status=="unrun") 
	$game:Game()
then      
	//actions
    // LogUtil.log("retract game start================= ");  
     retract($game);
    // LogUtil.log("retract game over ================="); 
    
end


//========================retract game over =========================




//========================message group start =========================




rule 'time operater '
ruleflow-group "time of operater"

when
	//conditions	
    $message:Message($subject:subject,predict=="send time")
    $room:Room($rid:id,status=="run")
    $operater:Operater()
then      
  //  LogUtil.log("time operater  start  =============");   
    
    $message.setPredict("time");
    $message.setWhere($rid);

	$operater.getTimerMessages().add($message);		

  //  LogUtil.log("time operater over =============");
  
end







rule 'game player query'
ruleflow-group "query"
when
	//conditions
    $message:Message($subject:subject,predict=="query")
    $room:Room(status=="run")
    $allLogins:ArrayList()
	      from accumulate(
	      $person:Player()	     
	      init(List ls=new ArrayList();),
	      action(ls.add($person);),
	      result(ls)
	      );
	$game:Game($status:status);  
    $operater:Operater()
    $bombPic:BombPic()   
  
    $tags:ArrayList()
	      from accumulate(
	      $tag:Tag()	     
	      init(List ls=new ArrayList();),
	      action(ls.add($tag);),
	      result(ls)
	      );
  
  
    $allUserCount:ArrayList()
	      from accumulate(
	      $userCount:UserCount()	     
	      init(List ls=new ArrayList();),
	      action(ls.add($userCount);),
	      result(ls)
	      );
   
    
    
then      

	// LogUtil.log("get player query info =================");	 
      Map m=new HashMap();
      m.put("room",$room);
      m.put("person",$allLogins);     
      setRemainTime($status+"Time",$game,$room) ; 
      m.put("game",$game);     
     int  rowCount=Integer.valueOf(getRoomSetting($room,"rowCount","9"));	 
     int  columnCount=Integer.valueOf(getRoomSetting($room,"columnCount","9"));
     String bomb=BombUtil.initBomb(rowCount,columnCount);
     for(Object o:$tags){
        Tag tag=(Tag)o;
       Pair p=  BombUtil.convertString2Pair(tag.getPid());
        int index=BombUtil.convertIndex((Integer)p.getLeft(), (Integer)p.getRight(), rowCount);
		bomb=BombUtil.replaceBomb(index, bomb, tag.getValue());
      } 
      $bombPic.setUser(bomb);
      m.put("bomb",$bombPic); 
       m.put("votes",$allUserCount);  
       
      $operater.setSnapshots(GsonUtil.toJson(m));     
      retract($message);   
	//  LogUtil.log("get player query info over =================");
end


//========================message group over =========================


//========================game record start =========================

rule 'record'
ruleflow-group "record"
when
	//conditions
	$game:Game(); 
    $operater:Operater()     
then      
	// LogUtil.log("record start=================");       

      JobLogger.logMessages($game.getRecordName(), $operater.getNextMessages());
	//LogUtil.log("record over =================");
end


//========================game record over =========================










  